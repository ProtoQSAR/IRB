Working on: 
 F:\ProtoQSAR\COMPIS\ONTOX_2022\ONTOX_2022_T3.1\MANUSCRIPT\first_final_version\Processing_datasets\pre_preprocessed_ONGOING
Output directory already exists: ../results/
Output directory already exists: ../results/clean_files

[+] Analysing "EPI_Boil_Pt_Data_SDF.sdf" dataset
	[++] file is in ISO-8859-1 encoding and wil be converted to "utf8" encoding
		[+++] Converted file created: EPI_Boil_Pt_Data_SDF_converted.sdf
	[++] Dataframe file created: PhCh_BP_PHYSPROP-original.csv
	[++] Dataframe file created: PhCh_BP_PHYSPROP-entiredata.csv

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\PhCh_BP_PHYSPROP-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	[Br-].[C+]#N --> [C+]#N
	[C+]#N.[Cl-] --> [C+]#N
	Cc1ccccc1[NH3+].[Cl-] --> Cc1ccccc1[NH3+]
[+] Eliminating inorganic and organometallic compounds

Your dataset had 75 molecules with forbiden atoms. They have been eliminated.
	 CCOB(OCC)OCC
	 CC[AsH2]
	 CC[Hg]CC
	 C[Zn]C
	 CC[Al](Cl)Cl
	 CCC[Sn](CCC)(CCC)CCC
	 CC[As](F)F
	 CB(C)N(C)C
	 C[Sn](C)(C)C
	 CC[Sb](CC)CC
	 [Se]c1ccccc1
	 CC(C)OB(OC(C)C)OC(C)C
	 CB(C)Cl
	 CC[Sn](CC)(CC)OC(C)=O
	 CCBCC
	 C[Sn](Br)(Br)Br
	 FB(F)c1ccccc1
	 C[As](C)C
	 Cl[As]1c2ccccc2Nc2ccccc21
	 Cl[As](c1ccccc1)c1ccccc1
	 CCO[As](=O)(OCC)OCC
	 C[Sn](C)(C)Br
	 COB1OB(OC)OB(OC)O1
	 C[As](F)F
	 CB(C)C
	 Cl/C=C/[As](Cl)Cl
	 C[Se][Se]C
	 c1ccc([Se]c2ccccc2)cc1
	 [Se]=C=[Se]
	 COBOC
	 CC[Te]CC
	 CCCCB(CCCC)CCCC
	 CSB(C)C
	 C[Hg]C
	 C[As]C
	 CC[Al](Cl)CC
	 C[AsH2]
	 CCCC[Ge](Cl)(CCCC)CCCC
	 CCB(CC)CC
	 CC[Al](CC)CC
	 CC[Zn]CC
	 CCCC[Sn](Cl)(CCCC)CCCC
	 C[Cd]C
	 c1ccc([Sn](c2ccccc2)(c2ccccc2)c2ccccc2)cc1
	 CC[Pb](CC)(CC)CC
	 CC[As](CC)CC
	 C[Sn](C)(C)Cl
	 CC[Sn](Br)(CC)CC
	 Cc1[c-][c-][c-][cH-]1.O=C[Mn+](C=O)C=O
	 CC[AsH]CC
	 C[Pb](C)(C)C
	 C[As](C)Cl
	 CCO[As](OCC)OCC
	 C[Al](C)C
	 CC[Sn](CC)(CC)CC
	 CBC
	 C[Sb](C)C
	 C[Sn](C)(C)[Sn](C)(C)C
	 Cc1ccc(B(F)F)cc1
	 CCC[Zn]CCC
	 C[Sn](Cl)(Cl)Cl
	 c1ccc([As](c2ccccc2)c2ccccc2)cc1
	 CCCOB(OCCC)OCCC
	 CCB(Cl)CC
	 COB(OC)OC
	 C[Sn](C)(Cl)Cl
	 CC(C)CB(CC(C)C)CC(C)C
	 Cl[As](Cl)c1ccccc1
	 C1=CCC([Fe]C2=CC=CC2)=C1
	 CN(C)B(F)N(C)C
	 CCCCOB(OCCCC)OCCCC
	 CCCB(CCC)CCC
	 C[Se]C
	 CCCCB(Cl)CCCC
	 Cl[Sn](Cl)(c1ccccc1)c1ccccc1
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[111.0, 112.5, 108.0] False 0.020735636628759456 2.29128784747792 110.5
[44.6, 52.2] False 0.11103329621937524 5.374011537017762 48.400000000000006
[307.0, 306.5] False 0.0011525782904426203 0.3535533905932738 306.75
[89.3, 91.5] False 0.01720835086958414 1.5556349186104066 90.4
[198.5, 185.0] False 0.0497832675150894 9.545941546018392 191.75
[69.0, 67.7] False 0.013448995106693633 0.9192388155425097 68.35
[3.73, 0.8] True 0.9147120833892203 2.071822868876584 2.265
[120.0, 120.5] False 0.002940152936326601 0.3535533905932738 120.25
[184.7, 169.0, 185.0] False 0.05096842987389643 9.152231057689336 179.5666666666667
[121.0, 118.0] False 0.017751634674139267 2.1213203435596424 119.5
[138.0, 136.5] False 0.007727942963787404 1.0606601717798212 137.25
[76.7, 80.4] False 0.033307384982689085 2.616295090390228 78.55000000000001
[122.5, 122.0] False 0.0028920522747916057 0.3535533905932738 122.25
[58.6, 56.3, 59.0] False 0.025138002293725613 1.4571661996262948 57.96666666666667
[80.0, 82.2] False 0.019181688268932264 1.5556349186104066 81.1
[102.2, 104.0] False 0.012345220234100713 1.2727922061357835 103.1
[37.0, 36.9, 36.3] False 0.010306548721960605 0.37859388972001956 36.733333333333334
[68.0, 67.9, 122.3, 65.0] True 0.34284188738986404 27.701624501101012 80.8
[124.0, 125.6, 125.0] False 0.006473227791234437 0.8082903768654734 124.86666666666667
[192.5, 196.1] False 0.01310130937864934 2.545584412271567 194.3
[73.0, 84.1, 85.0] False 0.082819850366825 6.6835619246027775 80.7
[35.5, 32.8, 37.4] False 0.06560733565784604 2.3115651263447754 35.23333333333333
[175.5, 178.3] False 0.011192193257899045 1.9798989873223412 176.9
[145.0, 151.0] False 0.028666491129184356 4.242640687119285 148.0
[155.5, 195.8, 187.3] False 0.11832320619030016 21.24295961803189 179.53333333333333
[144.0, 138.0, 144.0, 144.0, 144.0] False 0.018790487205880585 2.6832815729997477 142.8
[141.0, 125.0] False 0.08506547743597564 11.313708498984761 133.0
[231.0, 231.0, 228.5] False 0.0062710021997424955 1.4433756729740643 230.16666666666666
[176.0, 176.0, 176.0, 178.0] False 0.0056657223796034 1.0 176.5
[224.5, 225.0] False 0.0015730962874005508 0.3535533905932738 224.75
[101.4, 101.0] False 0.0027948884631879747 0.28284271247462306 101.2
[78.5, 77.5, 78.0] False 0.00641025641025641 0.5 78.0
[73.5, 73.2] False 0.002892052274791578 0.21213203435596223 73.35
[160.0, 158.5, 159.0] False 0.0047985085811055915 0.7637626158259733 159.16666666666666
[197.0, 198.0] False 0.0035802874996787217 0.7071067811865476 197.5
[-6.2, -1.3] True 0.9239528607504222 3.464823227814083 -3.75
[132.0, 157.5] False 0.12456803399141252 18.031222920256962 144.75
[121.2, 123.0] False 0.01042417859243066 1.2727922061357835 122.1
[170.5, 170.0] False 0.002076671897757849 0.3535533905932738 170.25
[192.7, 194.0] False 0.004754273677489112 0.9192388155425198 193.35
[254.7, 270.5] False 0.042544886301399305 11.172287142747459 262.6
[261.0, 262.0] False 0.002704041228246836 0.7071067811865476 261.5
[72.0, 112.5] True 0.3104371234477526 28.637824638055175 92.25
[227.0, 229.5, 229.5, 227.0] False 0.006323661217849132 1.4433756729740645 228.25
[50.9, 50.0] False 0.01261439252860043 0.6363961030678917 50.45
[230.0, 225.0] False 0.01554080837772632 3.5355339059327378 227.5
[224.5, 224.0] False 0.001576603748464989 0.3535533905932738 224.25
[106.5, 105.5, 106.0] False 0.0047169811320754715 0.5 106.0
[148.0, 144.0] False 0.019372788525658838 2.8284271247461903 146.0
[205.4, 195.0] False 0.036732819801898596 7.353910524340098 200.2
[222.0, 199.5] False 0.07549182717294102 15.90990257669732 210.75
[174.0, 174.5] False 0.0020290008068480562 0.3535533905932738 174.25
[185.0, 187.0] False 0.007603298722435995 1.4142135623730951 186.0
[120.0, 120.4] False 0.002353100769339626 0.28284271247462306 120.2
[182.0, 183.5, 182.5, 180.5] False 0.0068634179821551134 1.25 182.125
[232.8, 230.5] False 0.0070207019068813615 1.6263455967290674 231.65
[105.5, 100.8] False 0.03221911654461246 3.3234018715767752 103.15
[67.0, 66.4, 67.1] False 0.005664746479601192 0.37859388972001295 66.83333333333333
[95.8, 95.7] False 0.0007384927218658041 0.07071067811865074 95.75
[122.9, 123.3] False 0.002297666226438773 0.28284271247461296 123.1
[204.0, 207.4, 204.0] False 0.009569341478281106 1.962990915244731 205.13333333333333
[220.0, 220.0, 217.5] False 0.006585744515471016 1.4433756729740643 219.16666666666666
[173.0, 174.5] False 0.006104518974272352 1.0606601717798212 173.75
[155.9, 156.2, 157.0, 155.5] False 0.004067148870371997 0.6350852961085873 156.15
[110.3, 101.667] False 0.05759814350331383 6.104452841983461 105.98349999999999
[116.8, 116.7, 109.3] False 0.03764483758632526 4.301550108197433 114.26666666666667
[140.5, 138.5, 141.0] False 0.00944911182523068 1.3228756555322954 140.0
[189.2, 202.0] False 0.04627283639666573 9.050966799187817 195.6
[37.0, 28.2] False 0.19087545013624596 6.222539674441618 32.6
[204.0, 207.0] False 0.010322726732650328 2.1213203435596424 205.5
[212.0, 212.0, 216.0] False 0.010825317547305481 2.309401076758503 213.33333333333334
[170.7, 170.6, 172.0] False 0.004564728039688312 0.7810249675906702 171.1
[123.0, 117.5] False 0.03234168229959261 3.8890872965260113 120.25
[120.0, 124.4, 119.4] False 0.022513023891636372 2.7300793639257708 121.26666666666667
[151.0, 169.0] False 0.07954951288348659 12.727922061357855 160.0
[122.5, 120.1] False 0.013990571103443677 1.697056274847718 121.3
[144.0, 142.0, 151.2] False 0.03320264832868075 4.838732616433075 145.73333333333332
[91.9, 99.5] False 0.056154770501752944 5.374011537017757 95.7
[150.5, 148.5] False 0.009459622490789934 1.4142135623730951 149.5
[124.0, 129.8] False 0.03231851324572091 4.1012193308819835 126.9
[164.0, 162.0, 162.0] False 0.007098568883479006 1.1547005383792515 162.66666666666666
[60.0, 56.5] False 0.04248710273223891 2.4748737341529163 58.25
[176.5, 177.0] False 0.0020003020684202194 0.3535533905932738 176.75
[68.0, 68.5] False 0.0051802694592421065 0.3535533905932738 68.25
[62.5, 63.0] False 0.005634316981566116 0.3535533905932738 62.75
[173.5, 172.7] False 0.0032679689482914276 0.5656854249492461 173.1
[129.0, 122.5] False 0.03655025111501041 4.596194077712559 125.75
[193.0, 192.6] False 0.0014670265169845593 0.28284271247462306 192.8
[152.6, 149.0] False 0.01688053323787511 2.545584412271567 150.8
[128.0, 121.2] False 0.03859009720761253 4.808326112068521 124.6
[156.0, 151.7] False 0.019763140455652667 3.0405591591021626 153.85
[199.0, 200.0] False 0.003544394893165652 0.7071067811865476 199.5
[192.3, 192.0] False 0.0011039918519696712 0.2121320343559723 192.15
[175.0, 176.3] False 0.005233355055750184 0.9192388155425198 175.65
[117.6, 99.0] False 0.12144216186583362 13.152186130069781 108.3
[171.0, 195.0] False 0.09273531556544885 16.97056274847714 183.0
[178.5, 180.0] False 0.005917211558046422 1.0606601717798212 179.25
[131.1, 48.0] True 0.6561761420056069 58.76057351660209 89.55
[171.0, 136.0] False 0.16122955922820303 24.748737341529164 153.5
[183.8, 197.0] False 0.049022108779739594 9.33380951166242 190.4
[233.0, 241.0] False 0.02386858333119148 5.656854249492381 237.0
[255.0, 225.0] False 0.08838834764831845 21.213203435596427 240.0
[203.5, 210.5] False 0.023911823518385666 4.949747468305833 207.0
[202.0, 193.0] False 0.0322225874971085 6.363961030678928 197.5
[145.0, 144.8] False 0.0009759927966687472 0.14142135623730148 144.9
[56.8, 92.0] True 0.33454514378718375 24.890158697766473 74.4
[223.0, 195.5] False 0.09292920660755105 19.445436482630058 209.25
[177.1, 176.5] False 0.0023996836465606584 0.42426406871192446 176.8
[295.0, 286.0] False 0.02190692265293951 6.363961030678928 290.5
[230.0, 196.0] False 0.11287150497813433 24.041630560342615 213.0
[266.5, 265.0] False 0.003991195378287192 1.0606601717798212 265.75
[244.7, 240.0] False 0.013713232397675947 3.3234018715767655 242.35
[144.5, 138.5] False 0.029983326410736994 4.242640687119285 141.5
[153.0, 142.0] False 0.052733387071539135 7.7781745930520225 147.5
[48.7, 55.0] False 0.085916542362107 4.454772721475248 51.85
[155.4, 158.0] False 0.011732467333025014 1.8384776310850195 156.7
[193.5, 206.9] False 0.04732882551398472 9.475230867899741 200.2
[116.11, 117.0] False 0.005399382568367103 0.6293250352560277 116.555
[284.5, 307.5] False 0.05494410799760335 16.263455967290593 296.0
[338.0, 335.0] False 0.006304072343416471 2.1213203435596424 336.5
[-27.8, 71.0] True 3.2343587954273563 69.8621499812309 21.6
[137.6, 127.6] False 0.05332630325690404 7.0710678118654755 132.6
[175.5, 121.0] True 0.25994819274648795 38.53731957466684 148.25
[221.0, 232.5] False 0.03586208592566834 8.131727983645296 226.75
[173.0, 170.0] False 0.012369214831251559 2.1213203435596424 171.5
[225.0, 218.0] False 0.022346489698897666 4.949747468305833 221.5
[211.0, 200.0] False 0.03784999801971787 7.7781745930520225 205.5
[207.5, 219.0] False 0.038132370380517214 8.131727983645296 213.25
[245.0, 256.0] False 0.031050597177852385 7.7781745930520225 250.5
[245.0, 238.5] False 0.019012178191158465 4.596194077712559 241.75
[61.5, 13.0] True 0.9206625204710753 34.294678887547555 37.25
[256.1, 257.0] False 0.002480592878845748 0.6363961030678768 256.55
[221.0, 221.5] False 0.001597981426410277 0.3535533905932738 221.25
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \PhCh_BP_PHYSPROP-duplicates_for_manual_check.csv
[+] Checking for mixtures
['Brc1ccc(Br)cc1.Brc1cccc(Br)c1.Brc1ccccc1Br', 'C/C(=C\\C(C)(C)C)CC(C)(C)C.C=C(CC(C)(C)C)CC(C)(C)C', 'C/C=C/CC.C=CCCC', 'CC(C)c1ccc(C(C)C)cc1.CC(C)c1cccc(C(C)C)c1.CC(C)c1ccccc1C(C)C', 'CCc1ccc(CC)cc1.CCc1cccc(CC)c1.CCc1ccccc1CC', 'COc1ccc(O)c(C(C)(C)C)c1.COc1ccc(O)cc1C(C)(C)C', 'Cc1ccc(C)c(N)c1.Cc1ccc(N)c(C)c1.Cc1ccc(N)cc1C.Cc1cccc(C)c1N.Cc1cccc(N)c1C', 'Clc1cc(Cl)cc(-c2ccc(Cl)cc2Cl)c1.Clc1ccc(Cl)c(-c2c(Cl)ccc(Cl)c2Cl)c1', 'Clc1ccc2ccccc2c1.Clc1ccc2ccccc2c1.Clc1cccc2ccccc12', 'FC(F)(Cl)C(F)(Cl)Cl.FC(F)(F)C(Cl)(Cl)Cl', 'O=CC1=CCCCC1.O=CC1C=CCCC1.O=CC1CC=CCC1']

Your dataset had 11 mixtures
	 Brc1ccc(Br)cc1.Brc1cccc(Br)c1.Brc1ccccc1Br
	 C/C(=C\C(C)(C)C)CC(C)(C)C.C=C(CC(C)(C)C)CC(C)(C)C
	 C/C=C/CC.C=CCCC
	 CC(C)c1ccc(C(C)C)cc1.CC(C)c1cccc(C(C)C)c1.CC(C)c1ccccc1C(C)C
	 CCc1ccc(CC)cc1.CCc1cccc(CC)c1.CCc1ccccc1CC
	 COc1ccc(O)c(C(C)(C)C)c1.COc1ccc(O)cc1C(C)(C)C
	 Cc1ccc(C)c(N)c1.Cc1ccc(N)c(C)c1.Cc1ccc(N)cc1C.Cc1cccc(C)c1N.Cc1cccc(N)c1C
	 Clc1cc(Cl)cc(-c2ccc(Cl)cc2Cl)c1.Clc1ccc(Cl)c(-c2c(Cl)ccc(Cl)c2Cl)c1
	 Clc1ccc2ccccc2c1.Clc1ccc2ccccc2c1.Clc1cccc2ccccc12
	 FC(F)(Cl)C(F)(Cl)Cl.FC(F)(F)C(Cl)(Cl)Cl
	 O=CC1=CCCCC1.O=CC1C=CCCC1.O=CC1CC=CCC1

The mixtures with their values will be saved in a csv file
                                             SAN_SMILES  ...    y_old
39           Brc1ccc(Br)cc1.Brc1cccc(Br)c1.Brc1ccccc1Br  ...  [220.0]
144   C/C(=C\C(C)(C)C)CC(C)(C)C.C=C(CC(C)(C)C)CC(C)(C)C  ...  [180.0]
198                                     C/C=C/CC.C=CCCC  ...   [35.0]
1291  CC(C)c1ccc(C(C)C)cc1.CC(C)c1cccc(C(C)C)c1.CC(C...  ...  [202.0]
3181         CCc1ccc(CC)cc1.CCc1cccc(CC)c1.CCc1ccccc1CC  ...  [181.0]
3590      COc1ccc(O)c(C(C)(C)C)c1.COc1ccc(O)cc1C(C)(C)C  ...  [268.0]
3905  Cc1ccc(C)c(N)c1.Cc1ccc(N)c(C)c1.Cc1ccc(N)cc1C....  ...  [219.5]
4317  Clc1cc(Cl)cc(-c2ccc(Cl)cc2Cl)c1.Clc1ccc(Cl)c(-...  ...  [357.5]
4346  Clc1ccc2ccccc2c1.Clc1ccc2ccccc2c1.Clc1cccc2ccc...  ...  [259.0]
4434            FC(F)(Cl)C(F)(Cl)Cl.FC(F)(F)C(Cl)(Cl)Cl  ...   [46.5]
5099             O=CC1=CCCCC1.O=CC1C=CCCC1.O=CC1CC=CCC1  ...  [165.0]

[11 rows x 12 columns]

A new file has been generated:

.\results\PhCh_BP_PHYSPROP.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 5884 molecules.
Your output dataset has 5583 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\PhCh_BP_Katritzky-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[304.9, 305.6] False 0.0016215388921559883 0.49497474683061543 305.25
[397.5, 392.5] False 0.008950718749196805 3.5355339059327378 395.0
[335.9, 336.1] False 0.0004208968935635168 0.14142135623734164 336.0
[476.5, 476.6] False 0.00014838039684958728 0.07071067811867082 476.55
[473.5, 473.6] False 0.00014932040569880863 0.07071067811867082 473.55
	All duplicated compounds (including those with equivalent target) are save in a file called \PhCh_BP_Katritzky-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\PhCh_BP_Katritzky.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 584 molecules.
Your output dataset has 568 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\PhCh_BP_Hall-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[397.5, 392.5] False 0.008950718749196805 3.5355339059327378 395.0
[323.8, 332.1] False 0.01789597891095701 5.868986283848352 327.95000000000005
	All duplicated compounds (including those with equivalent target) are save in a file called \PhCh_BP_Hall-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\PhCh_BP_Hall.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 297 molecules.
Your output dataset has 276 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\PhCh_logD_Liu-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	Clc1c(cc(cc1C)-c1nc(n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c1-c1ccc(F)cc1)C(C)C)C.[Na+] --> Cc1cc(-c2nc(C(C)C)n(/C=C/[C@@H](O)C[C@@H](O)CC(=O)[O-])c2-c2ccc(F)cc2)cc(C)c1Cl
	[Na+].Fc1ccc(cc1)-c1n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c(nc1-c1ccc(F)cc1)C(F)(F)F --> O=C([O-])C[C@H](O)C[C@H](O)/C=C/n1c(C(F)(F)F)nc(-c2ccc(F)cc2)c1-c1ccc(F)cc1
	[Na+].Fc1ccc(cc1)-c1n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c(nc1-c1cc(NC)ccc1)C(C)C --> CNc1cccc(-c2nc(C(C)C)n(/C=C/[C@@H](O)C[C@@H](O)CC(=O)[O-])c2-c2ccc(F)cc2)c1
	[Na+].Fc1cc(C)c(cc1)-c1n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c(nc1-c1ccc(F)cc1)C(C)C --> Cc1cc(F)ccc1-c1c(-c2ccc(F)cc2)nc(C(C)C)n1/C=C/[C@@H](O)C[C@@H](O)CC(=O)[O-]
	[Na+].Fc1ccc(cc1)-c1nc(n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c1C(C)C)-c1ccc(F)cc1 --> CC(C)c1c(-c2ccc(F)cc2)nc(-c2ccc(F)cc2)n1/C=C/[C@@H](O)C[C@@H](O)CC(=O)[O-]
	[Na+].Fc1ccc(cc1)-c1n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c(nc1-c1cccnc1)C(C)C --> CC(C)c1nc(-c2cccnc2)c(-c2ccc(F)cc2)n1/C=C/[C@@H](O)C[C@@H](O)CC(=O)[O-]
	S(=O)(=O)(C)c1cc(ccc1)-c1nc(n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c1-c1ccc(F)cc1)C(C)C.[Na+] --> CC(C)c1nc(-c2cccc(S(C)(=O)=O)c2)c(-c2ccc(F)cc2)n1/C=C/[C@@H](O)C[C@@H](O)CC(=O)[O-]
	[Na+].Fc1ccc(cc1)-c1n(\C=C\[C@@H](O)C[C@@H](O)CC(=O)[O-])c(nc1-c1ccc(F)cc1)C(C)C --> CC(C)c1nc(-c2ccc(F)cc2)c(-c2ccc(F)cc2)n1/C=C/[C@@H](O)C[C@@H](O)CC(=O)[O-]
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[0.0080000004, 0.1] True 1.2047004323218442 0.06505382358631967 0.0540000002
[1.26, 1.54] False 0.14142135623730953 0.19798989873223333 1.4
[2.8299999, 2.8] False 0.007535748881600615 0.021213132724918284 2.81499995
[2.49, 2.52] False 0.008468344684868779 0.021213203435596288 2.505
[3.3399999, 3.45] False 0.022910697433500247 0.07778181664119846 3.39499995
[-0.079999998, 0.25999999] True 2.6712923089257115 0.24041629711814477 0.089999996
[1.61, 0.68000001] True 0.5743312633718473 0.6576092994324214 1.145000005
[0.19, 0.30000001] True 0.3174765363845116 0.07778175300158803 0.245000005
[1.83, 1.74] False 0.03565244274890159 0.06363961030678934 1.7850000000000001
[3.29, 3.3099999] False 0.004285474281008083 0.01414206491305296 3.29999995
[1.55, 1.54] False 0.004576742920301283 0.007071067811865481 1.545
[1.11, 0.77999997] True 0.246926203924505 0.2333452590047642 0.944999985
[2.97, 2.54] False 0.11036512374236498 0.3040559159102155 2.755
[2.5, 2.5599999] False 0.01676930316165219 0.04242633616051489 2.52999995
[2.03, 2.1500001] False 0.040599465274206145 0.0848528844530641 2.09000005
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \PhCh_logD_Liu-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\PhCh_logD_Liu.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 1043 molecules.
Your output dataset has 1020 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\PhCh_logD_Wu-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	O.O.O.CC(=O)O[C@@]12CO[C@@H]1C[C@H](O)[C@]3(C)[C@@H]2[C@H](OC(=O)c4ccccc4)[C@]5(O)C[C@H](OC(=O)[C@H](O)[C@@H](NC(=O)OC(C)(C)C)c6ccccc6)C(=C([C@@H](O)C3=O)C5(C)C)C --> CC(=O)O[C@@]12CO[C@@H]1C[C@H](O)[C@@]1(C)C(=O)[C@H](O)C3=C(C)[C@@H](OC(=O)[C@H](O)[C@@H](NC(=O)OC(C)(C)C)c4ccccc4)C[C@@](O)([C@@H](OC(=O)c4ccccc4)[C@@H]12)C3(C)C
[+] Eliminating inorganic and organometallic compounds

Your dataset had 7 molecules with forbiden atoms. They have been eliminated.
	 OB1N(C(=O)Nc2ccccc12)c3ccccc3
	 Cc1ccc(cc1)S(=O)(=O)N2N=Cc3ccccc3B2O
	 O=C1N([Se]c2ccccc12)c3ccccc3
	 CCCS(=O)(=O)N1N=Cc2cc(Cl)ccc2B1O
	 Cc1oc2C=NN(B(O)c2c1)S(=O)(=O)c3ccc(C)cc3
	 OB(O)c1ccccc1C=O
	 OB1N(C(=Nc2ccccc12)S)c3cccnc3
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\PhCh_logD_Wu.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 4200 molecules.
Your output dataset has 4193 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\PhCh_logH_Moldarresi-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[-4.876, -4.712] False 0.02418971883908932 0.11596551211459422 -4.7940000000000005
[-2.286, -2.178] False 0.034214844250962 0.0763675323681472 -2.232
[-1.907, -1.943] False 0.013223815128683496 0.02545584412271573 -1.925
[-2.07, -3.178] True 0.2985801499827343 0.7834743135546947 -2.6239999999999997
[-4.914, -6.357, -5.289, -6.368] False 0.12979317200406312 0.7439744619272899 -5.732000000000001
[-2.526, -3.011] False 0.12387458510943682 0.3429467888754758 -2.7685
[-5.149, -6.408] False 0.15406202950832631 0.8902474375138636 -5.7785
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \PhCh_logH_Moldarresi-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\PhCh_logH_Moldarresi.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 940 molecules.
Your output dataset has 926 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\PhCh_logH_Yao-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds

Your dataset had 1 molecules with forbiden atoms. They have been eliminated.
	 C[Se]C
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\PhCh_logH_Yao.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 591 molecules.
Your output dataset has 590 molecules.
thanks for using HYGIEIA!
Working on: 
 F:\ProtoQSAR\COMPIS\ONTOX_2022\ONTOX_2022_T3.1\MANUSCRIPT\first_final_version\Processing_datasets\pre_preprocessed_ONGOING
Output directory already exists: ../results/
Output directory already exists: ../results/clean_files

[+] Analysing "EPI_Boil_Pt_Data_SDF.sdf" dataset
	[++] file is in ISO-8859-1 encoding and wil be converted to "utf8" encoding
		[+++] Converted file created: EPI_Boil_Pt_Data_SDF_converted.sdf
	[++] Dataframe file created: PhCh_BP_PHYSPROP-original.csv
	[++] Dataframe file created: PhCh_BP_PHYSPROP-entiredata.csv
	[++] Preprocessed dataframe file created: PhCh_BP_PHYSPROP-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: PhCh_BP_PHYSPROP

[+] Analysing "PhCh_BP_Katritzky.xlsx" dataset
	[++] Dataframe file created: PhCh_BP_Katritzky-entiredata.csv
	[++] Preprocessed dataframe file created: PhCh_BP_Katritzky-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: PhCh_BP_Katritzky

[+] Analysing "PhCh_BP_Hall.xlsx" dataset
	[++] Dataframe file created: PhCh_BP_Hall-entiredata.csv
	[++] Preprocessed dataframe file created: PhCh_BP_Hall-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: PhCh_BP_Hall

[+] Analysing "PhCh_logD_Liu.xlsx" dataset
	[++] Dataframe file created: PhCh_logD_Liu-original.csv
	[++] Dataframe file created: PhCh_logD_Liu-entiredata.csv
	[++] Preprocessed dataframe file created: PhCh_logD_Liu-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: PhCh_logD_Liu

[+] Analysing "PhCh_logD_Wu.xlsx" dataset
	[++] Dataframe file created: PhCh_logD_Wu-original.csv
	[++] Dataframe file created: PhCh_logD_Wu-entiredata.csv
	[++] Preprocessed dataframe file created: PhCh_logD_Wu-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: PhCh_logD_Wu

[+] Analysing "PhCh_logH_Moldarresi.xlsx" dataset
	[++] Dataframe file created: PhCh_logH_Moldarresi-entiredata.csv
	[++] Preprocessed dataframe file created: PhCh_logH_Moldarresi-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: PhCh_logH_Moldarresi

[+] Analysing "PhCh_logH_Yao.xlsx" dataset
	[++] Dataframe file created: PhCh_logH_Yao-entiredata.csv
	[++] Preprocessed dataframe file created: PhCh_logH_Yao-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: PhCh_logH_Yao

[+] Analysing "EPI_Kowwin_Data_SDF.sdf" dataset
	[++] file is in ISO-8859-1 encoding and wil be converted to "utf8" encoding
		[+++] Converted file created: EPI_Kowwin_Data_SDF_converted.sdf
	[++] Dataframe file created: PhCh_logP_PHYSPROP-original.csv
