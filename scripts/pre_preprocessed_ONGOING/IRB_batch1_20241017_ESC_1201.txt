
#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_FUB_Tonnelier-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
['CCC(C)[C@H]1O[C@]2(C=C[C@@H]1C)C[C@@H]1C[C@@H](C/C=C(\\C)[C@@H](O[C@H]3C[C@H](OC)[C@@H](O[C@H]4C[C@H](OC)[C@@H](O)[C@H](C)O4)[C@H](C)O3)[C@@H](C)/C=C/C=C3\\CO[C@@H]4[C@H](O)C(C)=C[C@@H](C(=O)O1)[C@]34O)O2.CO[C@H]1C[C@H](O[C@H]2[C@H](C)O[C@@H](O[C@@H]3/C(C)=C/C[C@@H]4C[C@@H](C[C@]5(C=C[C@H](C)[C@@H](C(C)C)O5)O4)OC(=O)[C@@H]4C=C(C)[C@@H](O)[C@H]5OC/C(=C\\C=C\\[C@@H]3C)[C@@]45O)C[C@@H]2OC)O[C@@H](C)[C@@H]1O']

Your dataset had 1 mixtures
	 CCC(C)[C@H]1O[C@]2(C=C[C@@H]1C)C[C@@H]1C[C@@H](C/C=C(\C)[C@@H](O[C@H]3C[C@H](OC)[C@@H](O[C@H]4C[C@H](OC)[C@@H](O)[C@H](C)O4)[C@H](C)O3)[C@@H](C)/C=C/C=C3\CO[C@@H]4[C@H](O)C(C)=C[C@@H](C(=O)O1)[C@]34O)O2.CO[C@H]1C[C@H](O[C@H]2[C@H](C)O[C@@H](O[C@@H]3/C(C)=C/C[C@@H]4C[C@@H](C[C@]5(C=C[C@H](C)[C@@H](C(C)C)O5)O4)OC(=O)[C@@H]4C=C(C)[C@@H](O)[C@H]5OC/C(=C\C=C\[C@@H]3C)[C@@]45O)C[C@@H]2OC)O[C@@H](C)[C@@H]1O

The mixtures with their values will be saved in a csv file
   ID  ...        smiles_source
0   0  ...  isoSMILES_from_NAME

[1 rows x 11 columns]

A new file has been generated:

.\results\TK_FUB_Tonnelier.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 94 molecules.
Your output dataset has 83 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_FUB_Yamazaki-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	COc1ccc([C@@H]2Sc3ccccc3N(CCN(C)C)C(=O)[C@@H]2OC(C)=O)cc1.Cl --> COc1ccc([C@@H]2Sc3ccccc3N(CCN(C)C)C(=O)[C@@H]2OC(C)=O)cc1
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[70.0, 97.0] True 0.2286453064914585 19.091883092036785 83.5
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TK_FUB_Yamazaki-duplicates_for_manual_check.csv
[+] Checking for mixtures
['CCC[N@@+]12[C@H]3C[C@@]45c6ccccc6N(C)[C@H]4[C@@H]1C[C@H]([C@@H]3[C@H]5O)[C@H](CC)[C@H]2O.O=C([O-])[C@H](O)[C@@H](O)C(=O)O', 'CN(C)CCC(c1ccc(Cl)cc1)c1ccccn1.O=C(O)/C=C\\C(=O)O']

Your dataset had 2 mixtures
	 CCC[N@@+]12[C@H]3C[C@@]45c6ccccc6N(C)[C@H]4[C@@H]1C[C@H]([C@@H]3[C@H]5O)[C@H](CC)[C@H]2O.O=C([O-])[C@H](O)[C@@H](O)C(=O)O
	 CN(C)CCC(c1ccc(Cl)cc1)c1ccccn1.O=C(O)/C=C\C(=O)O

The mixtures with their values will be saved in a csv file
                                           SAN_SMILES  ...   y_old
35  CCC[N@@+]12[C@H]3C[C@@]45c6ccccc6N(C)[C@H]4[C@...  ...  [61.0]
63   CN(C)CCC(c1ccc(Cl)cc1)c1ccccn1.O=C(O)/C=C\C(=O)O  ...  [72.0]

[2 rows x 12 columns]

A new file has been generated:

.\results\TK_FUB_Yamazaki.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 143 molecules.
Your output dataset has 139 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_FUB_Lombardo-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_FUB_Lombardo.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 64 molecules.
Your output dataset has 63 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_FUB_Riley-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	Cc1[nH]cnc1C[C@H]1CCc2c(C)c3ccccc3n2C1=O.Cl --> Cc1[nH]cnc1C[C@H]1CCc2c(C)c3ccccc3n2C1=O
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_FUB_Riley.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 56 molecules.
Your output dataset has 54 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_FUB_Votano-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	C(=O)C(Cl)(Cl)Cl.O   --> O=CC(Cl)(Cl)Cl
	C(C1C(C(C(C(O1)O)O)O)O)O.O --> OCC1OC(O)C(O)C(O)C1O
	CC1=C(C(=O)N(N1C)C2=CC=CC=C2)N(C)CS(=O)(=O)[O-].[Na+] --> Cc1c(N(C)CS(=O)(=O)[O-])c(=O)n(-c2ccccc2)n1C
	C[N+]1(CCC2=CC(=C3C=C2[C@@H]1CC4=CC=C(C=C4)OC5=C6[C@@H](CC7=CC(=C(C=C7)OC)O3)[N+](CCC6=CC(=C5OC)OC)(C)C)OC)C.[I-].[I-]   --> COc1ccc2cc1Oc1cc3c(cc1OC)CC[N+](C)(C)[C@H]3Cc1ccc(cc1)Oc1c(OC)c(OC)cc3c1[C@@H](C2)[N+](C)(C)CC3
	CC(=O)OC1CC2CCC3C(C2(CC1[N+]4(CCCCC4)C)C)CCC5(C3CC(C5OC(=O)C)[N+]6(CCCCC6)C)C.[Br-].[Br-] --> CC(=O)OC1CC2CCC3C(CCC4(C)C3CC([N+]3(C)CCCCC3)C4OC(C)=O)C2(C)CC1[N+]1(C)CCCCC1
	C[N+]1=CC=CC=C1C=NO.[Cl-] --> C[n+]1ccccc1C=NO
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[50.0, 63.0] False 0.16269713549424986 9.192388155425117 56.5
[15.0, 59.0] True 0.8408837397894079 31.11269837220809 37.0
[99.0, 98.0] False 0.007178749047579164 0.7071067811865476 98.5
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TK_FUB_Votano-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_FUB_Votano.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 808 molecules.
Your output dataset has 733 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_FUB_cran-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds

Your dataset had 6 molecules with forbiden atoms. They have been eliminated.
	 C[As](C)(O)=O
	 C[Sn](C)(C)Cl
	 O=C(N[C@@H](Cc1ccccc1)C(=O)N[C@@H](CC(C)C)B(O)O)c2cnccn2
	 [Gd+3].COCCNC(=O)CN(CCN(CCN(CC([O-])=O)CC(=O)NCCOC)CC([O-])=O)CC([O-])=O
	 O[Sn](c1ccccc1)(c2ccccc2)c3ccccc3
	 O=C2O[Pt](N)(N)OC(=O)C12CCC1
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[nan, 0.22] False nan nan nan
[nan, 1.0] False nan nan nan
[0.413104, 0.22] True 0.4313513984250521 0.1365451478742471 0.316552
[0.398168608171313, 0.6283270000000001, 0.9] True 0.3911792905105347 0.2512017283920384 0.642165202723771
[0.6336, 0.61] False 0.02683776139595138 0.01668772003600257 0.6218
[0.0916, 0.11] False 0.12907504735944916 0.013010764773832475 0.1008
[0.22, 0.198] False 0.07443229275647865 0.015556349186104039 0.20900000000000002
[nan, 0.043] False nan nan nan
[0.004778831906811, 0.003868] False 0.14896910793878565 0.0006440554178271319 0.0043234159534055
[0.005, nan] False nan nan nan
[0.004758050885834, 0.00363] False 0.1901877901679908 0.0007976524308967131 0.004194025442917
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TK_FUB_cran-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_FUB_cran.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 1266 molecules.
Your output dataset has 1022 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_FUB_Zhu-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds

Your dataset had 2 molecules with forbiden atoms. They have been eliminated.
	 O=CC([Se]C1=CC=CC=C1)C(CC1=CC=CC=C1)NC(=O)OCC1C2=CC=CC=C2C2=CC=CC=C12
	 CC(C)CC(NC(=O)C(CC1=CC=CC=C1)NC(=O)C1=NC=CN=C1)B(O)O
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_FUB_Zhu.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 1242 molecules.
Your output dataset has 1240 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_CYP3A4inh_DeepPK-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds

Your dataset had 24 molecules with forbiden atoms. They have been eliminated.
	 O=C(O)c1ccc(B(O)O)cc1
	 O=Cc1ccc(B(O)O)cc1
	 c1ccc(B2OCC(C3OB(c4ccccc4)OC4COB(c5ccccc5)OC43)O2)cc1
	 Cc1csc(B(O)O)c1
	 OB(O)c1ccc(Br)cc1
	 Nc1cccc(B(O)O)c1
	 [Zr+2]
	 O=C(O)/C=C/c1cccc(B(O)O)c1
	 [Pt+4]
	 CC(=O)c1ccsc1B(O)O
	 [Cd+2]
	 OB(O)c1csc2ccccc12
	 OB(O)c1ccc(Cl)s1
	 Cc1ccc(B(O)O)cc1
	 c1ccc(B2OC[C@@H]3OB(c4ccccc4)O[C@H]([C@@H]4COB(c5ccccc5)O4)[C@@H]3O2)cc1
	 [Ir]
	 O=Cc1ccsc1B(O)O
	 OB(O)c1cc2ccccc2o1
	 COc1ccc(B(O)O)cc1
	 NCCOB(c1ccccc1)c1ccccc1
	 OB(O)O
	 OB(O)c1cc2ccccc2s1
	 OB(O)c1ccc(B(O)O)cc1
	 O=[N+]([O-])c1cccc(B(O)O)c1
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_CYP3A4inh_DeepPK.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 23040 molecules.
Your output dataset has 23015 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_CYP2C9inh_DeepPK-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	[2HH] --> 
[+] Eliminating inorganic and organometallic compounds

Your dataset had 7 molecules with forbiden atoms. They have been eliminated.
	 c1ccc(B2OCC(C3OB(c4ccccc4)OC4COB(c5ccccc5)OC43)O2)cc1
	 NCCOB(c1ccccc1)c1ccccc1
	 c1ccc(B2OC[C@@H]3OB(c4ccccc4)O[C@H]([C@@H]4COB(c5ccccc5)O4)[C@@H]3O2)cc1
	 [Zr+2]
	 [Pt+2]
	 [Ir]
	 [Pt+4]
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_CYP2C9inh_DeepPK.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 19283 molecules.
Your output dataset has 19274 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_CYP2C19inh_DeepPK-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	[200Au] --> 
	[2HH] --> 
[+] Eliminating inorganic and organometallic compounds

Your dataset had 8 molecules with forbiden atoms. They have been eliminated.
	 [Pt+4]
	 [Rb+]
	 NCCOB(c1ccccc1)c1ccccc1
	 [Pt+2]
	 c1ccc(B2OCC(C3OB(c4ccccc4)OC4COB(c5ccccc5)OC43)O2)cc1
	 [Zr+2]
	 [Ir]
	 c1ccc(B2OC[C@@H]3OB(c4ccccc4)O[C@H]([C@@H]4COB(c5ccccc5)O4)[C@@H]3O2)cc1
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_CYP2C19inh_DeepPK.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 19652 molecules.
Your output dataset has 19641 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_CYP2D6inh_DeepPK-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	[200Au] --> 
	[2HH] --> 
[+] Eliminating inorganic and organometallic compounds

Your dataset had 7 molecules with forbiden atoms. They have been eliminated.
	 [Ir]
	 [Pt+4]
	 [Zr+2]
	 c1ccc(B2OCC(C3OB(c4ccccc4)OC4COB(c5ccccc5)OC43)O2)cc1
	 [Rb+]
	 c1ccc(B2OC[C@@H]3OB(c4ccccc4)O[C@H]([C@@H]4COB(c5ccccc5)O4)[C@@H]3O2)cc1
	 NCCOB(c1ccccc1)c1ccccc1
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_CYP2D6inh_DeepPK.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 19700 molecules.
Your output dataset has 19690 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_CYP1A2inh_DeepPK-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	[2HH] --> 
[+] Eliminating inorganic and organometallic compounds

Your dataset had 7 molecules with forbiden atoms. They have been eliminated.
	 c1ccc(B2OC[C@@H]3OB(c4ccccc4)O[C@H]([C@@H]4COB(c5ccccc5)O4)[C@@H]3O2)cc1
	 NCCOB(c1ccccc1)c1ccccc1
	 c1ccc(B2OCC(C3OB(c4ccccc4)OC4COB(c5ccccc5)OC43)O2)cc1
	 [Ir]
	 [Pt+2]
	 [Zr+2]
	 [Rb+]
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_CYP1A2inh_DeepPK.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 19891 molecules.
Your output dataset has 19882 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_MRDD_DeepPK-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TOX_MRDD_DeepPK.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 1200 molecules.
Your output dataset has 1200 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_OATP1B1inh_livertox-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_OATP1B1inh_livertox.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 1851 molecules.
Your output dataset has 1851 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TK_OATP1B3inh_livertox-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TK_OATP1B3inh_livertox.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 1872 molecules.
Your output dataset has 1872 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_Cav12inh_CtoxPred-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	Cl.O=C(O)C1CN(C(c2ccccc2)c2ccccc2)CCN1C(=O)CC(c1ccccc1)c1ccccc1 --> O=C(O)C1CN(C(c2ccccc2)c2ccccc2)CCN1C(=O)CC(c1ccccc1)c1ccccc1
	CCOc1ccccc1C[C@H](c1ccccc1)N1CCNCC1.Cl --> CCOc1ccccc1C[C@H](c1ccccc1)N1CCNCC1
	Cl.O=C(CC(c1ccccc1)c1ccccc1)N1CCN(C(c2ccccc2)c2ccc(Cl)cc2)CC1 --> O=C(CC(c1ccccc1)c1ccccc1)N1CCN(C(c2ccccc2)c2ccc(Cl)cc2)CC1
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TOX_Cav12inh_CtoxPred-duplicates_for_manual_check.csv
[+] Checking for mixtures
['CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C3)cc(OCC)c1-c1ccc(F)cc1.O=C(O)C(F)(F)F']

Your dataset had 1 mixtures
	 CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C3)cc(OCC)c1-c1ccc(F)cc1.O=C(O)C(F)(F)F

The mixtures with their values will be saved in a csv file
                                            SAN_SMILES  ... y_old
325  CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C...  ...   [0]

[1 rows x 12 columns]

A new file has been generated:

.\results\TOX_Cav12inh_CtoxPred.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 802 molecules.
Your output dataset has 799 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_Cav12inh_ChEMBL-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[0, 1, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 0, 1] True 1.1547005383792515 0.5773502691896257 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0, 0, 0, 0] True 2.23606797749979 0.447213595499958 0.2
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TOX_Cav12inh_ChEMBL-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TOX_Cav12inh_ChEMBL.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 219 molecules.
Your output dataset has 177 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_Nav15inh_CtoxPred-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	Cl.O=C(CCc1ccccc1)c1cc(F)ccc1OCC(O)CN1CCN(C(c2ccccc2)c2ccccc2)CC1 --> O=C(CCc1ccccc1)c1cc(F)ccc1OCC(O)CN1CCN(C(c2ccccc2)c2ccccc2)CC1
	Cl.N[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1CNc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl --> N[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1CNc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl
	Cl.Nc1nc(-c2ccc(NC(=O)c3ccc[nH]3)cc2)c[nH]1 --> Nc1nc(-c2ccc(NC(=O)c3ccc[nH]3)cc2)c[nH]1
	COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@@H](O)C2)cc1OC
	COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@@H](O)C2)cc1OC
	CC(C)(C)OC(=O)n1cc(-c2cccc(NC(=O)c3cc[nH]c3)c2)nc1N.Cl --> CC(C)(C)OC(=O)n1cc(-c2cccc(NC(=O)c3cc[nH]c3)c2)nc1N
	CSc1ccc([C@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1.Cl --> CSc1ccc([C@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1
	Cl.Nc1nc(-c2cccc(NC(=O)c3ccc[nH]3)c2)c[nH]1 --> Nc1nc(-c2cccc(NC(=O)c3ccc[nH]3)c2)c[nH]1
	Cl.O=C(CCc1ccccc1)c1ccccc1OCC(O)CN1CCC(c2ccccc2)CC1 --> O=C(CCc1ccccc1)c1ccccc1OCC(O)CN1CCC(c2ccccc2)CC1
	CCN[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1COc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl.Cl --> CCN[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1COc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl
	Cc1ccc(N2CCN(CC(O)COc3ccccc3C(=O)CCc3ccccc3)CC2)cc1.Cl --> Cc1ccc(N2CCN(CC(O)COc3ccccc3C(=O)CCc3ccccc3)CC2)cc1
	Cc1cccc(C)c1OCC(C)N.Cl --> Cc1cccc(C)c1OCC(C)N
	COc1ccc(CCOC2CCCCC2N2CCC(O)C2)cc1OC.Cl --> COc1ccc(CCOC2CCCCC2N2CCC(O)C2)cc1OC
	CNc1ncc(-c2cccc(NC(=O)c3cc4ccccc4[nH]3)c2)[nH]1.Cl --> CNc1ncc(-c2cccc(NC(=O)c3cc4ccccc4[nH]3)c2)[nH]1
	COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@H](O)C2)cc1OC
	COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@H](O)C2)cc1OC
	CN1Cc2ccccc2[C@@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1.Cl --> CN1Cc2ccccc2[C@@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1
	CN1Cc2ccccc2[C@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1.Cl --> CN1Cc2ccccc2[C@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1
	CSc1ccc([C@@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1.Cl --> CSc1ccc([C@@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1
	Cl.Nc1ncc(-c2ccc(NC(=O)c3cc4ccccc4[nH]3)cc2)[nH]1 --> Nc1ncc(-c2ccc(NC(=O)c3cc4ccccc4[nH]3)cc2)[nH]1
	Cl.Nc1ncc(-c2cccc(NC(=O)c3cc4ccccc4[nH]3)c2)[nH]1 --> Nc1ncc(-c2cccc(NC(=O)c3cc4ccccc4[nH]3)c2)[nH]1
	Cc1cccc(NC(=N)c2ccc(-c3ccc(Cl)cc3)o2)c1.Cl --> Cc1cccc(NC(=N)c2ccc(-c3ccc(Cl)cc3)o2)c1
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TOX_Nav15inh_CtoxPred-duplicates_for_manual_check.csv
[+] Checking for mixtures
['CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C3)cc(OCC)c1-c1ccc(F)cc1.O=C(O)C(F)(F)F', 'CN(C)C(=O)[C@@H](c1ccc(-c2ccc3ncnn3c2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F', 'CN(C)C(=O)[C@@H](c1ccc(-c2ccn3nccc3n2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F', 'CN(C)C(=O)[C@@H](c1ccc(-c2ccn3ncnc3c2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F', 'CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O', 'CN1Cc2ccccc2[C@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O', 'COc1cc(C(F)(F)F)ccc1COCC(O)CN1CCC(N2Cc3ccccc3C2=O)CC1.O=C(O)/C=C/C(=O)O']

Your dataset had 7 mixtures
	 CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C3)cc(OCC)c1-c1ccc(F)cc1.O=C(O)C(F)(F)F
	 CN(C)C(=O)[C@@H](c1ccc(-c2ccc3ncnn3c2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F
	 CN(C)C(=O)[C@@H](c1ccc(-c2ccn3nccc3n2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F
	 CN(C)C(=O)[C@@H](c1ccc(-c2ccn3ncnc3c2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F
	 CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O
	 CN1Cc2ccccc2[C@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O
	 COc1cc(C(F)(F)F)ccc1COCC(O)CN1CCC(N2Cc3ccccc3C2=O)CC1.O=C(O)/C=C/C(=O)O

The mixtures with their values will be saved in a csv file
                                            SAN_SMILES  ... y_old
175  CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C...  ...   [0]
387  CN(C)C(=O)[C@@H](c1ccc(-c2ccc3ncnn3c2)cc1)[C@H...  ...   [0]
388  CN(C)C(=O)[C@@H](c1ccc(-c2ccn3nccc3n2)cc1)[C@H...  ...   [0]
389  CN(C)C(=O)[C@@H](c1ccc(-c2ccn3ncnc3c2)cc1)[C@H...  ...   [0]
436  CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(...  ...   [0]
438  CN1Cc2ccccc2[C@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=...  ...   [0]
626  COc1cc(C(F)(F)F)ccc1COCC(O)CN1CCC(N2Cc3ccccc3C...  ...   [1]

[7 rows x 12 columns]

A new file has been generated:

.\results\TOX_Nav15inh_CtoxPred.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 2069 molecules.
Your output dataset has 2056 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_Nav15inh_ChEMBL-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	CSc1ccc([C@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1.Cl --> CSc1ccc([C@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1
	Cc1cccc(C)c1OCC(C)N.Cl --> Cc1cccc(C)c1OCC(C)N
	COc1ccc(CCOC2CCCCC2N2CCC(O)C2)cc1OC.Cl --> COc1ccc(CCOC2CCCCC2N2CCC(O)C2)cc1OC
	CNc1nc(-c2cccc(NC(=O)c3cc4ccccc4[nH]3)c2)c[nH]1.Cl --> CNc1nc(-c2cccc(NC(=O)c3cc4ccccc4[nH]3)c2)c[nH]1
	COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@H](O)C2)cc1OC
	COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@@H](O)C2)cc1OC
	COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@@H](O)C2)cc1OC
	Cl.N[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1CNc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl --> N[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1CNc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl
	COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@H]2CCCC[C@@H]2N2CC[C@H](O)C2)cc1OC
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 1, 0] True 2.0 0.5 0.25
[1, 1, 0] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1, 0, 1] True 1.1547005383792515 0.5773502691896257 0.5
[1, 0, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 1, 0, 1, 0] True 1.549193338482967 0.5163977794943223 0.3333333333333333
[0, 1, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[1, 1, 0] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 0, 1] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1, 1, 1, 1, 1] True 0.4898979485566356 0.408248290463863 0.8333333333333334
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TOX_Nav15inh_ChEMBL-duplicates_for_manual_check.csv
[+] Checking for mixtures
['CN(C)C(=O)[C@@H](c1ccc(-c2ccn3nccc3n2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F', 'CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O', 'COc1cc(C(F)(F)F)ccc1COCC(O)CN1CCC(N2Cc3ccccc3C2=O)CC1.O=C(O)/C=C/C(=O)O']

Your dataset had 3 mixtures
	 CN(C)C(=O)[C@@H](c1ccc(-c2ccn3nccc3n2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F
	 CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O
	 COc1cc(C(F)(F)F)ccc1COCC(O)CN1CCC(N2Cc3ccccc3C2=O)CC1.O=C(O)/C=C/C(=O)O

The mixtures with their values will be saved in a csv file
                                            SAN_SMILES  ... y_old
150  CN(C)C(=O)[C@@H](c1ccc(-c2ccn3nccc3n2)cc1)[C@H...  ...   [0]
175  CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(...  ...   [0]
240  COc1cc(C(F)(F)F)ccc1COCC(O)CN1CCC(N2Cc3ccccc3C...  ...   [1]

[3 rows x 12 columns]

A new file has been generated:

.\results\TOX_Nav15inh_ChEMBL.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 1165 molecules.
Your output dataset has 979 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_hERGinh_ChEMBL-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Your dataset had salts, that have been eliminated:

	CCCCN1CCCC[C@@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@@H]1C(=O)Nc1c(C)cccc1C
	CCCCN1CCCC[C@@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@@H]1C(=O)Nc1c(C)cccc1C
	Cc1ccc(C(=O)N2CCN(c3ccc(OCCCN4CCCCC4)cc3)C(=O)C2)cc1.Cl --> Cc1ccc(C(=O)N2CCN(c3ccc(OCCCN4CCCCC4)cc3)C(=O)C2)cc1
	Cl.O=C(c1ccccc1)N1CCN(c2ccc(OCCCN3CCCCC3)cc2)C(=O)C1 --> O=C(c1ccccc1)N1CCN(c2ccc(OCCCN3CCCCC3)cc2)C(=O)C1
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	NC(=O)c1c(NC(=O)Nc2ccc(Cl)cc2)sc2c1CC[N+]1(CCOCC1)C2.[I-] --> NC(=O)c1c(NC(=O)Nc2ccc(Cl)cc2)sc2c1CC[N+]1(CCOCC1)C2
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	COCCCOc1cc(C(=O)N(C[C@@H]2CNC[C@H]2Cc2ccccc2)C(C)C)ccc1OC.Cl --> COCCCOc1cc(C(=O)N(C[C@@H]2CNC[C@H]2Cc2ccccc2)C(C)C)ccc1OC
	CCOC[C@@H](CC(C)C)NC(=O)[C@@H]1CNC[C@H](C(=O)N(c2ccc(C(C)C)c(OCCCOC)n2)C2CC2)C1.Cl --> CCOC[C@@H](CC(C)C)NC(=O)[C@@H]1CNC[C@H](C(=O)N(c2ccc(C(C)C)c(OCCCOC)n2)C2CC2)C1
	Cc1nc(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)c(C)n1-c1ccccc1.Cl.Cl.Cl.Cl --> Cc1nc(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)c(C)n1-c1ccccc1
	CC(C)(Cc1ccc2ccccc2c1)NC[C@@H](O)COc1cccc(Cl)c1C#N.Cl --> CC(C)(Cc1ccc2ccccc2c1)NC[C@@H](O)COc1cccc(Cl)c1C#N
	CCOC[C@@H](CC(C)C)NC(=O)[C@@H]1CNC[C@H](C(=O)N(c2ccc(C(C)C)cn2)C2CC2)C1.Cl --> CCOC[C@@H](CC(C)C)NC(=O)[C@@H]1CNC[C@H](C(=O)N(c2ccc(C(C)C)cn2)C2CC2)C1
	CCCn1c(-c2ccccn2)cc(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)c1C.Cl.Cl.Cl.Cl --> CCCn1c(-c2ccccn2)cc(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)c1C
	COc1ccc(CCN(C)CCCC(C#N)(c2ccc(OC)c(OC)c2)C(C)C)cc1OC.Cl --> COc1ccc(CCN(C)CCCC(C#N)(c2ccc(OC)c(OC)c2)C(C)C)cc1OC
	CC(N(C)C)C1(c2ccc(Cl)c(Cl)c2)CCCCC1.Cl --> CC(N(C)C)C1(c2ccc(Cl)c(Cl)c2)CCCCC1
	Cl.Nc1ncc(-c2cnn(C3CCNCC3)c2)cc1-c1nc2ccccc2o1 --> Nc1ncc(-c2cnn(C3CCNCC3)c2)cc1-c1nc2ccccc2o1
	Cl.O=C(c1ccc(Cl)cc1)N1CCN(c2ccc(OC3CCN(C4CCC4)CC3)cc2)C(=O)C1 --> O=C(c1ccc(Cl)cc1)N1CCN(c2ccc(OC3CCN(C4CCC4)CC3)cc2)C(=O)C1
	CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C
	CCN(CC)Cc1cc(Nc2ccnc3cc(Cl)ccc23)ccc1O.Cl --> CCN(CC)Cc1cc(Nc2ccnc3cc(Cl)ccc23)ccc1O
	CC[N+]1(C)Cc2sc(NC(=O)Nc3ccc(Cl)cc3)c(C(N)=O)c2C1.[I-] --> CC[N+]1(C)Cc2sc(NC(=O)Nc3ccc(Cl)cc3)c(C(N)=O)c2C1
	CN1CCN(CCCCN2C(=O)CN(/N=C/c3ccc(-c4ccc(Cl)cc4)o3)C2=O)CC1.Cl --> CN1CCN(CCCCN2C(=O)CN(/N=C/c3ccc(-c4ccc(Cl)cc4)o3)C2=O)CC1
	CC(C)(N)c1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1.Cl.Cl --> CC(C)(N)c1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1
	Cl.Cl.NC1(c2cc(C(=O)N[C@@H]3CCc4ccc(Oc5ccnc6c5CCC(=O)N6)cc4C3)cc(C(F)(F)F)c2)CCC1 --> NC1(c2cc(C(=O)N[C@@H]3CCc4ccc(Oc5ccnc6c5CCC(=O)N6)cc4C3)cc(C(F)(F)F)c2)CCC1
	CC(C)N1CC=C(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(O)cc3)cc2)CC1.Cl --> CC(C)N1CC=C(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(O)cc3)cc2)CC1
	CN(C)Cc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1.Cl.Cl --> CN(C)Cc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1
	CCN(CC)C(C)CCCNc1nccc(NCc2ccc(Cl)cc2Cl)n1.N --> CCN(CC)C(C)CCCNc1nccc(NCc2ccc(Cl)cc2Cl)n1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	Cl.Fc1cc(C(Oc2ccccc2)C2CNC2)ccc1Cl --> Fc1cc(C(Oc2ccccc2)C2CNC2)ccc1Cl
	CC(=O)NCCc1ccccc1-c1ccc([C@@H](CN)Cc2ccc(OCCOc3c(Cl)cc(C)cc3Cl)cc2)c(C)c1.Cl --> CC(=O)NCCc1ccccc1-c1ccc([C@@H](CN)Cc2ccc(OCCOc3c(Cl)cc(C)cc3Cl)cc2)c(C)c1
	CC(=O)N1CCC(C(=O)N(CCCN2CCN(Cc3ccc(F)cc3)CC2)c2ccc(C)c(Cl)c2)CC1.Cl --> CC(=O)N1CCC(C(=O)N(CCCN2CCN(Cc3ccc(F)cc3)CC2)c2ccc(C)c(Cl)c2)CC1
	CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)CC)CC2)c2ncccc2c1
	CN(C/C=C/c1ccc2ccccc2c1)Cc1ccc2c(c1)OCCC2.Cl --> CN(C/C=C/c1ccc2ccccc2c1)Cc1ccc2c(c1)OCCC2
	CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C
	CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C
	COCCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.Cl.Cl --> COCCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O
	Cl.Cl.FCCOc1ccc(CCN2CCN(CCc3ccccc3)CC2)cc1 --> FCCOc1ccc(CCN2CCN(CCc3ccccc3)CC2)cc1
	CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1cccc2ccoc12.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1cccc2ccoc12
	COc1ccc2cc3[n+](cc2c1OC)CCc1cc2c(cc1-3)OCO2.[Cl-] --> COc1ccc2cc3[n+](cc2c1OC)CCc1cc2c(cc1-3)OCO2
	Cl.Cl.FCCOc1ccc(CCN2CCN(CCc3ccccc3Cl)CC2)cc1 --> FCCOc1ccc(CCN2CCN(CCc3ccccc3Cl)CC2)cc1
	Cl.NC(=O)[C@@H]1CC[C@H](c2ccc(OCc3ccccc3F)cc2)N1 --> NC(=O)[C@@H]1CC[C@H](c2ccc(OCc3ccccc3F)cc2)N1
	CN1CCCC1CCOc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(Br)cc2)cc1.Cl --> CN1CCCC1CCOc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(Br)cc2)cc1
	Cc1ncoc1-c1nnc(SCCCN[C@@H]2CC3C[C@]3(c3ccc(C(F)(F)F)cc3F)C2)n1C.Cl --> Cc1ncoc1-c1nnc(SCCCN[C@@H]2CC3C[C@]3(c3ccc(C(F)(F)F)cc3F)C2)n1C
	Cc1nc(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)cc(C(C)C)n1.Cl --> Cc1nc(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)cc(C(C)C)n1
	COc1ccccc1CCN1CCC(CCc2cccc(OCCF)c2)CC1.Cl --> COc1ccccc1CCN1CCC(CCc2cccc(OCCF)c2)CC1
	Cl.FCCOc1ccccc1CCC1CCN(CCc2ccccc2Cl)CC1 --> FCCOc1ccccc1CCC1CCN(CCc2ccccc2Cl)CC1
	Cl.Cl.FCCOc1cccc(CCN2CCN(CCc3ccccc3)CC2)c1 --> FCCOc1cccc(CCN2CCN(CCc3ccccc3)CC2)c1
	CN(C)C(=O)CNCCc1cccc(OCCCC(C)(F)F)c1.Cl --> CN(C)C(=O)CNCCc1cccc(OCCCC(C)(F)F)c1
	COc1ccc([C@]2(c3ccc(F)cc3)N=C(c3cc(C#N)ccn3)N[C@H]2C)cn1.Cl --> COc1ccc([C@]2(c3ccc(F)cc3)N=C(c3cc(C#N)ccn3)N[C@H]2C)cn1
	CNC1CCCC(c2c[nH]c3ccc(NC(=N)c4cccs4)cc23)C1.Cl --> CNC1CCCC(c2c[nH]c3ccc(NC(=N)c4cccs4)cc23)C1
	CN(C/C=C/c1ccc(C(F)(F)F)c(F)c1)Cc1ccc2c(c1)OCCC2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)c(F)c1)Cc1ccc2c(c1)OCCC2
	CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)CCO2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)CCO2
	C[N+](C)(CCCCNC(=O)Cc1ccc(OCc2ccccc2)cc1)CCNC(=O)c1nc(Cl)c(N)nc1N.[Br-] --> C[N+](C)(CCCCNC(=O)Cc1ccc(OCc2ccccc2)cc1)CCNC(=O)c1nc(Cl)c(N)nc1N
	CN(C/C=C/c1ccc(C(F)(F)F)cc1F)Cc1ccc2c(c1)OCCC2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1F)Cc1ccc2c(c1)OCCC2
	CN(C/C=C/c1ccc2ccccc2c1)Cc1ccc2c(c1)CCO2.Cl --> CN(C/C=C/c1ccc2ccccc2c1)Cc1ccc2c(c1)CCO2
	CN(C/C=C/c1ccc(-c2ccccc2)cc1)Cc1ccc2c(c1)CCO2.Cl --> CN(C/C=C/c1ccc(-c2ccccc2)cc1)Cc1ccc2c(c1)CCO2
	CN(C/C=C/c1ccc(Br)cc1)Cc1ccc2c(c1)OCCC2.Cl --> CN(C/C=C/c1ccc(Br)cc1)Cc1ccc2c(c1)OCCC2
	CCOC[C@@H](CC(C)C)NC(=O)[C@@H]1CNC[C@H](C(=O)N(c2cc(OCCCOC)c(C(C)C)cc2F)C2CC2)C1.Cl --> CCOC[C@@H](CC(C)C)NC(=O)[C@@H]1CNC[C@H](C(=O)N(c2cc(OCCCOC)c(C(C)C)cc2F)C2CC2)C1
	CC(C)OC(=O)c1ccc(NC(=O)N[C@@H](Cc2ccc(O)cc2)C(=O)N[C@H]2CCC[N+](C)(Cc3cccc(O)c3)C2)cc1.[I-] --> CC(C)OC(=O)c1ccc(NC(=O)N[C@@H](Cc2ccc(O)cc2)C(=O)N[C@H]2CCC[N+](C)(Cc3cccc(O)c3)C2)cc1
	COc1ccccc1N1CCN(CCCCCC(=O)n2c3ccccc3c3ccccc32)CC1.Cl --> COc1ccccc1N1CCN(CCCCCC(=O)n2c3ccccc3c3ccccc32)CC1
	CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCC2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCC2
	COc1ccccc1CNC[C@H]1C[C@@H]1c1cc(F)ccc1OC.Cl --> COc1ccccc1CNC[C@H]1C[C@@H]1c1cc(F)ccc1OC
	CCN1CCc2c(sc(NC(=O)Nc3ccc(Cl)cc3)c2C(N)=O)C1.Cl --> CCN1CCc2c(sc(NC(=O)Nc3ccc(Cl)cc3)c2C(N)=O)C1
	CC(C)N1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(O)cc3)cc2)CC1.Cl.Cl --> CC(C)N1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(O)cc3)cc2)CC1
	Cc1nc2n(c(=O)c1CCN1CCN(c3cccc4sccc34)CC1)CCCC2(F)F.Cl --> Cc1nc2n(c(=O)c1CCN1CCN(c3cccc4sccc34)CC1)CCCC2(F)F
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	Cc1[nH]c(-c2ccccn2)cc1C(=O)NCCCN1CCN(c2cccc(Cl)c2Cl)CC1.Cl.Cl.Cl.Cl --> Cc1[nH]c(-c2ccccn2)cc1C(=O)NCCCN1CCN(c2cccc(Cl)c2Cl)CC1
	Cl.Cn1cc2c(OCC3CCN(CCN4CCOCC4)CC3)nc3ccccc3c2c1 --> Cn1cc2c(OCC3CCN(CCN4CCOCC4)CC3)nc3ccccc3c2c1
	Cl.N[C@H](C(=O)N1CC[C@H](F)C1)C1CCC(NS(=O)(=O)c2ccc(F)cc2F)CC1 --> N[C@H](C(=O)N1CC[C@H](F)C1)C1CCC(NS(=O)(=O)c2ccc(F)cc2F)CC1
	CC(C)N1CCC(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(O)cc3)cc2)CC1.Cl --> CC(C)N1CCC(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(O)cc3)cc2)CC1
	Cc1nc(C(=O)NCCCN2CCN(c3cccc(C)c3C)CC2)cc(C(C)(C)C)n1.Cl --> Cc1nc(C(=O)NCCCN2CCN(c3cccc(C)c3C)CC2)cc(C(C)(C)C)n1
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	CCOC(=O)CCc1ccc(OC[C@H](O)CNC(C)(C)Cc2ccc3ccccc3c2)c(C#N)c1.Cl --> CCOC(=O)CCc1ccc(OC[C@H](O)CNC(C)(C)Cc2ccc3ccccc3c2)c(C#N)c1
	Cl.O=C1Cc2cc(CCN3CCN(c4nsc5ccccc45)CC3)c(Cl)cc2N1 --> O=C1Cc2cc(CCN3CCN(c4nsc5ccccc45)CC3)c(Cl)cc2N1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)CCC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)CCC)CC2)c2ncccc2c1
	CCCCc1cc(OC2CCN(CCCS(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCS(=O)(=O)CC)CC2)c2ncccc2c1
	CCCCc1cc(OC2CCN(CCC(C)S(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCC(C)S(=O)(=O)CC)CC2)c2ncccc2c1
	CCCCN1CCCC[C@@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@@H]1C(=O)Nc1c(C)cccc1C
	CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	COc1cc(OC(C)C)cc(S(=O)(=O)c2ccc3c(c2)O[C@H]2CNCC[C@@H]32)c1.Cl --> COc1cc(OC(C)C)cc(S(=O)(=O)c2ccc3c(c2)O[C@H]2CNCC[C@@H]32)c1
	CCCCc1cc(OC2CCN(CCNS(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCNS(=O)(=O)CC)CC2)c2ncccc2c1
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	Cc1cccc(NC(=N)c2ccc(-c3ccc(Cl)cc3)o2)c1.Cl --> Cc1cccc(NC(=N)c2ccc(-c3ccc(Cl)cc3)o2)c1
	Cc1nnc(C(C)C)n1C1CCN(C(C)C[C@H](NC(=O)C2CC(F)(F)C2)c2ccccc2)CC1.Cl --> Cc1nnc(C(C)C)n1C1CCN(C(C)C[C@H](NC(=O)C2CC(F)(F)C2)c2ccccc2)CC1
	Cc1nnc(C(C)C)n1C1CCN(C(C)C[C@H](NC(=O)C2CCC(F)(F)CC2)c2ccccc2)CC1.Cl --> Cc1nnc(C(C)C)n1C1CCN(C(C)C[C@H](NC(=O)C2CCC(F)(F)CC2)c2ccccc2)CC1
	COC(=O)c1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCC3)cc1.Cl --> COC(=O)c1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCC3)cc1
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	CN[C@H]1CC[C@@H](c2c[nH]c3ccc(NC(=N)c4cccs4)cc32)CC1.Cl --> CN[C@H]1CC[C@@H](c2c[nH]c3ccc(NC(=N)c4cccs4)cc32)CC1
	COc1ccc2c(c1)CN(C(=O)CCN1CCC(Cc3ccccc3)CC1)CCS2.Cl --> COc1ccc2c(c1)CN(C(=O)CCN1CCC(Cc3ccccc3)CC1)CCS2
	COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@@H](O)C2)cc1OC.Cl --> COc1ccc(CCO[C@@H]2CCCC[C@H]2N2CC[C@@H](O)C2)cc1OC
	CN(C/C=C/c1ccc(-c2ccccc2)cc1)Cc1coc2ccccc12.Cl --> CN(C/C=C/c1ccc(-c2ccccc2)cc1)Cc1coc2ccccc12
	CC(C)n1nc(C(=O)NCC2CCN(CCNS(C)(=O)=O)CC2)c2ccccc21.Cl --> CC(C)n1nc(C(=O)NCC2CCN(CCNS(C)(=O)=O)CC2)c2ccccc21
	C[C@@H](C1CCC(N(C)C(=O)c2cccc(F)c2)CC1)[C@H](N)C(=O)N1CC[C@H](F)C1.Cl --> C[C@@H](C1CCC(N(C)C(=O)c2cccc(F)c2)CC1)[C@H](N)C(=O)N1CC[C@H](F)C1
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	CNCC[C@@H](Oc1cc(Cl)ccc1C#N)c1ccccc1.Cl --> CNCC[C@@H](Oc1cc(Cl)ccc1C#N)c1ccccc1
	COCc1ccc2c3nc(N4CCC[C@@H](N)C4)n(Cc4ccccc4Cl)c3c(=O)n(C)c2c1.Cl --> COCc1ccc2c3nc(N4CCC[C@@H](N)C4)n(Cc4ccccc4Cl)c3c(=O)n(C)c2c1
	COc1cc(OC)cc(C(=O)NCC2(C(=O)O)CCN(Cc3ccc(C(F)(F)F)cc3)CC2)c1.Cl --> COc1cc(OC)cc(C(=O)NCC2(C(=O)O)CCN(Cc3ccc(C(F)(F)F)cc3)CC2)c1
	Cl.Cl.FCCOc1ccccc1CCN1CCN(CCc2ccc(F)cc2)CC1 --> FCCOc1ccccc1CCN1CCN(CCc2ccc(F)cc2)CC1
	C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.O --> C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	COc1ccc(CCN(C)CCCC(C#N)(c2ccc(OC)c(OC)c2)C(C)C)cc1OC.Cl --> COc1ccc(CCN(C)CCCC(C#N)(c2ccc(OC)c(OC)c2)C(C)C)cc1OC
	CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C
	CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C
	CCOc1ccccc1C[C@H](c1ccccc1)N1CCNCC1.Cl --> CCOc1ccccc1C[C@H](c1ccccc1)N1CCNCC1
	Cl.Cn1cc2c(OCC3CCN(CCc4ccc(N)cc4)CC3)nc3ccccc3c2c1 --> Cn1cc2c(OCC3CCN(CCc4ccc(N)cc4)CC3)nc3ccccc3c2c1
	CC(C)n1nc(C(=O)NCC2CCN(CCc3ccc(N)cc3)CC2)c2ccccc21.Cl.Cl --> CC(C)n1nc(C(=O)NCC2CCN(CCc3ccc(N)cc3)CC2)c2ccccc21
	CCCCCCC[N+](CC)(CC)C/C=C/Cc1ccc(Cl)cc1.[I-] --> CCCCCCC[N+](CC)(CC)C/C=C/Cc1ccc(Cl)cc1
	CN(C)C(=O)CNCCc1cccc(OCCCCC(F)(F)F)c1.Cl --> CN(C)C(=O)CNCCc1cccc(OCCCCC(F)(F)F)c1
	CCCOC(c1ccc2ccccc2c1)C1CNC1.Cl --> CCCOC(c1ccc2ccccc2c1)C1CNC1
	Cl.Clc1ccc(OC(c2ccc3ccccc3c2)C2CNC2)cc1Cl --> Clc1ccc(OC(c2ccc3ccccc3c2)C2CNC2)cc1Cl
	Cl.FCCOc1ccccc1CCC1CCN(CCc2ccc(F)cc2)CC1 --> FCCOc1ccccc1CCC1CCN(CCc2ccc(F)cc2)CC1
	CCN[C@H]1CCC[C@@H](c2c[nH]c3ccc(NC(=N)c4cccs4)cc23)C1.Cl --> CCN[C@H]1CCC[C@@H](c2c[nH]c3ccc(NC(=N)c4cccs4)cc23)C1
	Cl.N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccc(F)cc3)cc2)cc1 --> N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccc(F)cc3)cc2)cc1
	CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1cccc2ccoc12.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1cccc2ccoc12
	COc1ccc(CCN2CCC(CCc3ccccc3OCCF)CC2)cc1.Cl --> COc1ccc(CCN2CCC(CCc3ccccc3OCCF)CC2)cc1
	CN1CC(C)(NC(=O)Nc2cccc(-c3nnnn3C)c2)C(CN2CCC[C@@H](Cc3ccc(F)cc3)C2)OC1=O.Cl --> CN1CC(C)(NC(=O)Nc2cccc(-c3nnnn3C)c2)C(CN2CCC[C@@H](Cc3ccc(F)cc3)C2)OC1=O
	CN[C@@H](C)C(=O)N[C@@H]1C(=O)N(Cc2c(C)ccc3ccccc23)c2ccc(C#N)cc2N(C(C)=O)[C@H]1C.Cl --> CN[C@@H](C)C(=O)N[C@@H]1C(=O)N(Cc2c(C)ccc3ccccc23)c2ccc(C#N)cc2N(C(C)=O)[C@H]1C
	Cl.O=C(CCc1ccccc1)c1cc(F)ccc1OCC(O)CN1CCN(C(c2ccccc2)c2ccccc2)CC1 --> O=C(CCc1ccccc1)c1cc(F)ccc1OCC(O)CN1CCN(C(c2ccccc2)c2ccccc2)CC1
	Cc1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCC3)cc1.Cl --> Cc1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCC3)cc1
	Cl.O=C(CCc1ccccc1)c1ccccc1OCC(O)CN1CCC(c2ccccc2)CC1 --> O=C(CCc1ccccc1)c1ccccc1OCC(O)CN1CCC(c2ccccc2)CC1
	Cl.c1ccc(C2CC3(N4CCCC4)CNCC2C(c2ccccc2)C3)cc1 --> c1ccc(C2CC3(N4CCCC4)CNCC2C(c2ccccc2)C3)cc1
	COc1ccc2ncc(F)c(C[C@H](O)C34CCC(NCc5ccc6c(n5)NC(=O)CO6)(CC3)CO4)c2n1.Cl --> COc1ccc2ncc(F)c(C[C@H](O)C34CCC(NCc5ccc6c(n5)NC(=O)CO6)(CC3)CO4)c2n1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CC(C)n1nc(C(=O)NCC2CCN(CCN3CCOCC3)CC2)c2ccccc21.Cl.Cl --> CC(C)n1nc(C(=O)NCC2CCN(CCN3CCOCC3)CC2)c2ccccc21
	CCN[C@H]1CC[C@@H](c2c[nH]c3ccc(NC(=N)c4cccs4)cc32)CC1.Cl --> CCN[C@H]1CC[C@@H](c2c[nH]c3ccc(NC(=N)c4cccs4)cc32)CC1
	Cc1ncoc1-c1nnc(SCCCN2CC3CC3(c3cc(F)cc(C(F)(F)F)c3)C2)n1C.Cl --> Cc1ncoc1-c1nnc(SCCCN2CC3CC3(c3cc(F)cc(C(F)(F)F)c3)C2)n1C
	Cl.OC(c1cc(C(F)(F)F)nc2c(C(F)(F)F)cccc12)C1CCCCN1 --> OC(c1cc(C(F)(F)F)nc2c(C(F)(F)F)cccc12)C1CCCCN1
	CSc1ccc([C@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1.Cl --> CSc1ccc([C@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1
	C[C@@H](C1CCC(N(C)C(=O)C2CC2)CC1)[C@H](N)C(=O)N1CC[C@H](F)C1.Cl --> C[C@@H](C1CCC(N(C)C(=O)C2CC2)CC1)[C@H](N)C(=O)N1CC[C@H](F)C1
	CNC(C)C1(c2ccc(Cl)c(Cl)c2)CCCCC1.Cl --> CNC(C)C1(c2ccc(Cl)c(Cl)c2)CCCCC1
	Cl.Cl.Cl.Cn1cnc(C(=O)N(Cc2cccc(Cl)c2)[C@H]2CC[C@@H](N)CC2)c1 --> Cn1cnc(C(=O)N(Cc2cccc(Cl)c2)[C@H]2CC[C@@H](N)CC2)c1
	Cl.O=c1n(C[C@@H](O)CO)c2ccccc2n1C1CCN(C[C@H]2[C@H]3CC[C@H](C3)C23CC3)CC1 --> O=c1n(C[C@@H](O)CO)c2ccccc2n1C1CCN(C[C@H]2[C@H]3CC[C@H](C3)C23CC3)CC1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CCNCc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1.Cl.Cl --> CCNCc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1
	Cc1c(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)cc(-c2ccccn2)n1C.Cl.Cl.Cl.Cl --> Cc1c(C(=O)NCCCN2CCN(c3cccc(Cl)c3Cl)CC2)cc(-c2ccccn2)n1C
	C=C(F)COc1ccc(Cl)cc1[C@H]1C[C@@H]1CN.Cl --> C=C(F)COc1ccc(Cl)cc1[C@H]1C[C@@H]1CN
	CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)CC(C)C)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)CC(C)C)CC2)c2ncccc2c1
	Cl.N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccccc3Cl)cc2)cc1 --> N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccccc3Cl)cc2)cc1
	COc1cccnc1C(=O)N1CCN(c2ccc(NC(=O)C(C)(C)c3ccccc3)cc2Cl)CC1.Cl --> COc1cccnc1C(=O)N1CCN(c2ccc(NC(=O)C(C)(C)c3ccccc3)cc2Cl)CC1
	Cl.O=C(CCc1ccccc1)c1ccccc1OCC(O)CN1CCN(C(c2ccccc2)c2ccccc2)CC1 --> O=C(CCc1ccccc1)c1ccccc1OCC(O)CN1CCN(C(c2ccccc2)c2ccccc2)CC1
	CCS(=O)(=O)Nc1cc(-c2cn(C)c3c(=O)[nH]ccc23)cc2c1ccn2C(C)(c1ccccn1)c1ccccn1.Cl --> CCS(=O)(=O)Nc1cc(-c2cn(C)c3c(=O)[nH]ccc23)cc2c1ccn2C(C)(c1ccccn1)c1ccccn1
	CCCOC(c1ccc(Cl)c(Cl)c1)C1CNC1.Cl --> CCCOC(c1ccc(Cl)c(Cl)c1)C1CNC1
	C[N+](C)(CCCCNC(=O)Cc1ccc(OCc2ccccc2)cc1)CCNC(=O)c1nc(Cl)c(N)nc1N.[Br-] --> C[N+](C)(CCCCNC(=O)Cc1ccc(OCc2ccccc2)cc1)CCNC(=O)c1nc(Cl)c(N)nc1N
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CN(C/C=C/c1ccc(F)cc1C(F)(F)F)Cc1ccc2c(c1)OCO2.Cl --> CN(C/C=C/c1ccc(F)cc1C(F)(F)F)Cc1ccc2c(c1)OCO2
	C[C@@H]1NC(c2cc(Cl)ccn2)=N[C@@]1(c1ccc(F)cc1)c1ccc(F)nc1.Cl --> C[C@@H]1NC(c2cc(Cl)ccn2)=N[C@@]1(c1ccc(F)cc1)c1ccc(F)nc1
	CCCCc1cc(OC2CCN(CCC(C)S(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCC(C)S(=O)(=O)CC)CC2)c2ncccc2c1
	CC(N(C)C)C1(c2ccc3ccccc3c2)CCCCC1.Cl --> CC(N(C)C)C1(c2ccc3ccccc3c2)CCCCC1
	C/C(=N\NC(=N)N)c1ccc2c(c1)Cc1cc(/C(C)=N/NC(=N)N)ccc1-2.Cl.Cl --> C/C(=N\NC(=N)N)c1ccc2c(c1)Cc1cc(/C(C)=N/NC(=N)N)ccc1-2
	COc1ccc2ncc(F)c(CCC34CCC(NCc5ccc6c(n5)NC(=O)CO6)(CC3)CO4)c2n1.Cl --> COc1ccc2ncc(F)c(CCC34CCC(NCc5ccc6c(n5)NC(=O)CO6)(CC3)CO4)c2n1
	Cc1c(C(=O)NCCN2CCN(c3cccc(Cl)c3Cl)CC2)cc(C(C)(C)C)n1C.Cl --> Cc1c(C(=O)NCCN2CCN(c3cccc(Cl)c3Cl)CC2)cc(C(C)(C)C)n1C
	Cl.c1ccc(OC(c2ccc3ccccc3c2)C2CNC2)cc1 --> c1ccc(OC(c2ccc3ccccc3c2)C2CNC2)cc1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CN1Cc2ccccc2[C@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1.Cl --> CN1Cc2ccccc2[C@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CC(C)(C)CC(C)(C)c1ccc(OCCOCC[N+](C)(C)Cc2ccccc2)cc1.[Cl-] --> CC(C)(C)CC(C)(C)c1ccc(OCCOCC[N+](C)(C)Cc2ccccc2)cc1
	CN1Cc2ccccc2[C@@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1.Cl --> CN1Cc2ccccc2[C@@H](c2ccc(F)cc2F)N=C1CCc1ccc(NS(C)(=O)=O)cc1
	CC(C)N(Cc1ccc(Cl)c(Cl)c1)CC1CNC1.Cl --> CC(C)N(Cc1ccc(Cl)c(Cl)c1)CC1CNC1
	COc1ccccc1CCN1CCC(CCc2ccccc2OCCF)CC1.Cl --> COc1ccccc1CCN1CCC(CCc2ccccc2OCCF)CC1
	Cl.FCCOc1ccccc1CCC1CCN(CCc2ccccc2)CC1 --> FCCOc1ccccc1CCC1CCN(CCc2ccccc2)CC1
	Cc1c(Cl)cccc1N1CCN(CCCNC(=O)c2nc(-c3ccccc3)n(-c3ccccc3)c2C)CC1.Cl.Cl.Cl --> Cc1c(Cl)cccc1N1CCN(CCCNC(=O)c2nc(-c3ccccc3)n(-c3ccccc3)c2C)CC1
	CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C
	Cc1c(Cl)cccc1N1CCN(CCCNC(=O)c2nc(-c3ccccc3)n(-c3ccccc3)c2Cn2cncn2)CC1.Cl.Cl.Cl --> Cc1c(Cl)cccc1N1CCN(CCCNC(=O)c2nc(-c3ccccc3)n(-c3ccccc3)c2Cn2cncn2)CC1
	Cc1cccc(N2CCN(CCCNC(=O)c3nc(C)n(-c4ccc5c(c4)OCCO5)c3C)CC2)c1C.Cl.Cl --> Cc1cccc(N2CCN(CCCNC(=O)c3nc(C)n(-c4ccc5c(c4)OCCO5)c3C)CC2)c1C
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C
	CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCC[C@H]1C(=O)Nc1c(C)cccc1C
	Cl.N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccccc3Br)cc2)cc1 --> N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccccc3Br)cc2)cc1
	CN(C)CCOc1ccc(-c2cc(=O)c3c(O)cc(OCCCCCC(=O)NO)cc3o2)cc1.Cl --> CN(C)CCOc1ccc(-c2cc(=O)c3c(O)cc(OCCCCCC(=O)NO)cc3o2)cc1
	Cc1ccc(N2CCN(CC(O)COc3ccccc3C(=O)CCc3ccccc3)CC2)cc1.Cl --> Cc1ccc(N2CCN(CC(O)COc3ccccc3C(=O)CCc3ccccc3)CC2)cc1
	Cc1ccc(-c2cc(S(=O)(=O)c3ccc(CN)s3)ccc2S(C)(=O)=O)cc1.Cl --> Cc1ccc(-c2cc(S(=O)(=O)c3ccc(CN)s3)ccc2S(C)(=O)=O)cc1
	CSc1ccc([C@@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1.Cl --> CSc1ccc([C@@H]2N=C(OCc3ccc(NS(C)(=O)=O)cc3)N(C)Cc3ccccc32)cc1
	CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C.Cl --> CCCCN1CCCCC1C(=O)Nc1c(C)cccc1C
	Cl.N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccc(F)cc3F)cc2)cc1 --> N=C(N)N/N=C/c1ccc(-c2ccc(/C=N/Nc3ccc(F)cc3F)cc2)cc1
	CC(C)N1CCC(c2ccc(/C(=C(/CCCO)c3ccc(F)cc3F)c3ccc(O)cc3)cc2)CC1.Cl --> CC(C)N1CCC(c2ccc(/C(=C(/CCCO)c3ccc(F)cc3F)c3ccc(O)cc3)cc2)CC1
	CN(C/C=C/c1ccc(C(F)(F)F)cc1F)Cc1ccc2c(c1)CCO2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1F)Cc1ccc2c(c1)CCO2
	COc1ccc(/C=C/CN(C)Cc2ccc3c(c2)CCCCC3)cc1.Cl --> COc1ccc(/C=C/CN(C)Cc2ccc3c(c2)CCCCC3)cc1
	CC[N+]1(C)CCc2c(sc(NC(=O)Nc3ccc(Cl)cc3)c2C(N)=O)C1.[I-] --> CC[N+]1(C)CCc2c(sc(NC(=O)Nc3ccc(Cl)cc3)c2C(N)=O)C1
	CN(C/C=C/c1ccc(C(F)F)cc1)Cc1ccc2c(c1)OCCC2.Cl --> CN(C/C=C/c1ccc(C(F)F)cc1)Cc1ccc2c(c1)OCCC2
	CN(C/C=C/c1ccc(-c2ccccc2)cc1)Cc1ccc2c(c1)OCCC2.Cl --> CN(C/C=C/c1ccc(-c2ccccc2)cc1)Cc1ccc2c(c1)OCCC2
	CCCCc1cc(OC2CCN(CCCNS(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCNS(=O)(=O)CC)CC2)c2ncccc2c1
	CCCCc1cc(OC2CCN(CCCS(=O)(=O)NC(C)(C)C)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCS(=O)(=O)NC(C)(C)C)CC2)c2ncccc2c1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CN(C/C=C/C=C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCO2.Cl --> CN(C/C=C/C=C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCO2
	CN(C/C=C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCO2.Cl --> CN(C/C=C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCO2
	COc1ccc(/C=C/CN(C)Cc2ccc3c(c2)CCCCC3)cc1.Cl --> COc1ccc(/C=C/CN(C)Cc2ccc3c(c2)CCCCC3)cc1
	Cl.Cl.NCc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1 --> NCc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1
	Cl.Cl.O=C1CCc2c(Oc3ccc4c(c3)C[C@H](NC(=O)c3cc(C(F)(F)F)cc(C5(O)CNC5)c3)CC4)ccnc2N1 --> O=C1CCc2c(Oc3ccc4c(c3)C[C@H](NC(=O)c3cc(C(F)(F)F)cc(C5(O)CNC5)c3)CC4)ccnc2N1
	Cl.Cl.FCCOc1ccccc1CCN1CCN(CCc2ccccc2Cl)CC1 --> FCCOc1ccccc1CCN1CCN(CCc2ccccc2Cl)CC1
	Cl.FCCOc1ccc(CCC2CCN(CCc3ccccc3Cl)CC2)cc1 --> FCCOc1ccc(CCC2CCN(CCc3ccccc3Cl)CC2)cc1
	CC#CCn1c(N2CCC[C@@H](N)C2)nc2c1c(=O)n(CCCN1CCN(c3nc(-c4ccccc4)no3)CC1)c(=O)n2C.Cl --> CC#CCn1c(N2CCC[C@@H](N)C2)nc2c1c(=O)n(CCCN1CCN(c3nc(-c4ccccc4)no3)CC1)c(=O)n2C
	CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)C(C)C)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)C(C)C)CC2)c2ncccc2c1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CNCc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1.Cl.Cl --> CNCc1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1
	CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.Cl --> CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1
	CN(C)c1ccc(/N=N/c2ccccn2)c([O-])c1.[Na+] --> CN(C)c1ccc(/N=N/c2ccccn2)c([O-])c1
	CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCO2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)OCCO2
	Cl.FCCOc1cccc(CCN2CCC(CCc3ccccc3)CC2)c1 --> FCCOc1cccc(CCN2CCC(CCc3ccccc3)CC2)c1
	Cl.Cl.FCCOc1ccccc1CCN1CCN(CCc2ccccc2)CC1 --> FCCOc1ccccc1CCN1CCN(CCc2ccccc2)CC1
	CN1CCC[C@H]1COc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(Br)cc2)cc1.Cl --> CN1CCC[C@H]1COc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(Br)cc2)cc1
	CN1CCC[C@H]1COc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(O)cc2)cc1.Cl --> CN1CCC[C@H]1COc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(O)cc2)cc1
	C=CCOc1cc(F)c(F)cc1C1CC1CN.Cl --> C=CCOc1cc(F)c(F)cc1C1CC1CN
	CCN1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(C)cc3)cc2)CC1.Cl.Cl --> CCN1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(C)cc3)cc2)CC1
	Cc1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCO3)cc1.Cl --> Cc1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCO3)cc1
	Cl.N[C@H](CO)c1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1 --> N[C@H](CO)c1cc(C(=O)N[C@@H]2CCc3ccc(Oc4ccnc5c4CCC(=O)N5)cc3C2)cc(C(F)(F)F)c1
	CN1[C@@H]2CC[C@H]1c1c(sc(NC(=O)Nc3ccc(Cl)cc3)c1C(N)=O)C2.Cl --> CN1[C@H]2CC[C@@H]1Cc1sc(NC(=O)Nc3ccc(Cl)cc3)c(C(N)=O)c12
	CCCCc1cc(OC2CCN(CCCS(=O)(=O)CCC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCS(=O)(=O)CCC)CC2)c2ncccc2c1
	CCCCc1cc(OC2CCN(CCS(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCS(=O)(=O)CC)CC2)c2ncccc2c1
	CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)C3CCCCC3)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCNS(=O)(=O)C3CCCCC3)CC2)c2ncccc2c1
	CCCCc1cc(OC2CCN(CCCCN(C)S(=O)(=O)CC)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCN(C)S(=O)(=O)CC)CC2)c2ncccc2c1
	Cc1ccc(/C(=C(\CCCO)c2ccccc2)c2ccc(N3CCNCC3)cc2)cc1.Cl.Cl --> Cc1ccc(/C(=C(\CCCO)c2ccccc2)c2ccc(N3CCNCC3)cc2)cc1
	CN(C/C=C/C=C/c1ccc(C(F)(F)F)cc1F)Cc1ccc2c(c1)OCO2.Cl --> CN(C/C=C/C=C/c1ccc(C(F)(F)F)cc1F)Cc1ccc2c(c1)OCO2
	Cl.OCCC/C(=C(\c1ccc(O)cc1)c1ccc(C2CCN(C3CC3)C2)cc1)c1ccccc1 --> OCCC/C(=C(\c1ccc(O)cc1)c1ccc(C2CCN(C3CC3)C2)cc1)c1ccccc1
	CC(C)N1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(Br)cc3)cc2)CC1.Cl.Cl --> CC(C)N1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3ccc(Br)cc3)cc2)CC1
	Cc1ccc(/C(=C(\CCCO)c2ccccc2)c2ccc(N3CCN(C)CC3)cc2)cc1.Cl.Cl --> Cc1ccc(/C(=C(\CCCO)c2ccccc2)c2ccc(N3CCN(C)CC3)cc2)cc1
	Cc1[nH]c(/C=C2\C(=O)Nc3ccc(F)cc32)c(C)c1NC(=O)[C@H]1CCCN1.Cl --> Cc1[nH]c(/C=C2\C(=O)Nc3ccc(F)cc32)c(C)c1NC(=O)[C@H]1CCCN1
	COc1ccc(CCN2CCC(CCc3cccc(OCCF)c3)CC2)cc1.Cl --> COc1ccc(CCN2CCC(CCc3cccc(OCCF)c3)CC2)cc1
	Cl.O=S(=O)(/C=C/c1ncccc1F)c1ccc(OCCCN2CCOCC2)cc1 --> O=S(=O)(/C=C/c1ncccc1F)c1ccc(OCCCN2CCOCC2)cc1
	CN(C/C=C/c1ccc(C(F)F)cc1)Cc1ccc2c(c1)CCO2.Cl --> CN(C/C=C/c1ccc(C(F)F)cc1)Cc1ccc2c(c1)CCO2
	COc1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCC3)c(F)c1.Cl --> COc1ccc(/C=C/CN(C)Cc2ccc3c(c2)OCCC3)c(F)c1
	CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)CCCC2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)CCCC2
	Cl.NC[C@H]1C[C@@H]1c1cc(Cl)ccc1OCCF --> NC[C@H]1C[C@@H]1c1cc(Cl)ccc1OCCF
	CC(NC(=O)c1ccc(C(F)(F)F)cc1Cl)C1(N2CCN(S(=O)(=O)c3cn(C)nn3)CC2)CCC(F)(F)CC1.Cl --> CC(NC(=O)c1ccc(C(F)(F)F)cc1Cl)C1(N2CCN(S(=O)(=O)c3cn(C)nn3)CC2)CCC(F)(F)CC1
	CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)CCCC2.Cl --> CN(C/C=C/c1ccc(C(F)(F)F)cc1)Cc1ccc2c(c1)CCCC2
	CCN[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1COc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl.Cl --> CCN[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1COc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl
	Cl.N[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1CNc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl --> N[C@@H]1CCC=C(c2ccc(F)cc2)[C@H]1CNc1cc(F)c(S(=O)(=O)Nc2cscn2)cc1Cl
	Cl.FCCOc1cccc(CCC2CCN(CCc3ccccc3)CC2)c1 --> FCCOc1cccc(CCC2CCN(CCc3ccccc3)CC2)c1
	CCCCCOc1cccc(CCNCC(=O)N(C)C)c1.Cl --> CCCCCOc1cccc(CCNCC(=O)N(C)C)c1
	CN(C)C(=O)CNCCc1cccc(OCCCC(F)(F)CF)c1.Cl --> CN(C)C(=O)CNCCc1cccc(OCCCC(F)(F)CF)c1
	CN(C)C(=O)CNCCc1cccc(OCCCC(F)(F)F)c1.Cl --> CN(C)C(=O)CNCCc1cccc(OCCCC(F)(F)F)c1
	CN1CCCC1CCOc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(O)cc2)cc1.Cl --> CN1CCCC1CCOc1ccc(/C(=C(/CCCO)c2ccccc2)c2ccc(O)cc2)cc1
	Cl.O=S(=O)(/C=C/c1ncccc1F)c1ccc(OCCCN2CCOCC2)cc1 --> O=S(=O)(/C=C/c1ncccc1F)c1ccc(OCCCN2CCOCC2)cc1
	NC(=O)c1c(NC(=O)Nc2ccc(Cl)cc2)sc2c1CC[N+]1(CCCC1)C2.[Br-] --> NC(=O)c1c(NC(=O)Nc2ccc(Cl)cc2)sc2c1CC[N+]1(CCCC1)C2
	CCCCc1cc(OC2CCN(CCCS(=O)(=O)C(C)C)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCS(=O)(=O)C(C)C)CC2)c2ncccc2c1
	CCCCc1cc(OC2CCN(CCCCS(=O)(=O)C(C)(C)C)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCS(=O)(=O)C(C)(C)C)CC2)c2ncccc2c1
	Cl.c1cncc(OC[C@H]2CNCCN2c2nc3ncccc3o2)c1 --> c1cncc(OC[C@H]2CNCCN2c2nc3ncccc3o2)c1
	Cl.FCCOc1ccc(CCN2CCC(CCc3ccccc3)CC2)cc1 --> FCCOc1ccc(CCN2CCC(CCc3ccccc3)CC2)cc1
	Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1.Cl.Cl --> Cc1cccc(CCN2CCC(C(=O)c3ccc(NS(C)(=O)=O)cc3)CC2)n1
	CCCC(N)C(=O)NCCc1ccc(-c2ccc(Cl)c(Cl)c2)cc1.Cl --> CCCC(N)C(=O)NCCc1ccc(-c2ccc(Cl)c(Cl)c2)cc1
	CNCCNC(=O)c1cc2c([nH]c3c(C)cccc32)c(-c2ccc(Cl)c(Cl)c2)n1.Cl --> CNCCNC(=O)c1cc2c([nH]c3c(C)cccc32)c(-c2ccc(Cl)c(Cl)c2)n1
	CC(C)N1CC=C(c2ccc(/C(=C(/CCCO)c3ccccc3)c3cccc(O)c3)cc2)CC1.Cl --> CC(C)N1CC=C(c2ccc(/C(=C(/CCCO)c3ccccc3)c3cccc(O)c3)cc2)CC1
	COc1ccc(NC(=O)N2CCNC[C@@H]2COc2cccnc2)cc1.Cl --> COc1ccc(NC(=O)N2CCNC[C@@H]2COc2cccnc2)cc1
	CC(C)N1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3cccc(O)c3)cc2)CC1.Cl.Cl --> CC(C)N1CCN(c2ccc(/C(=C(/CCCO)c3ccccc3)c3cccc(O)c3)cc2)CC1
	CCCCOc1cccc(CCNCC(=O)N(C)C)c1.Cl --> CCCCOc1cccc(CCNCC(=O)N(C)C)c1
	COc1cc(OC)c(F)c(COc2cnc(Nc3cnn(CCNC4CCN(C)CC4)c3)nc2)c1F.Cl.Cl.Cl --> COc1cc(OC)c(F)c(COc2cnc(Nc3cnn(CCNC4CCN(C)CC4)c3)nc2)c1F
	CC(C)N1CCC(c2ccc(/C(=C(/CCCO)c3ccc(F)cc3)c3ccc(O)cc3)cc2)CC1.Cl --> CC(C)N1CCC(c2ccc(/C(=C(/CCCO)c3ccc(F)cc3)c3ccc(O)cc3)cc2)CC1
	COc1cc(OC)c(F)c(COc2cnc(Nc3cnn(CCN4CCNCC4)c3)nc2)c1F.Cl.Cl.Cl --> COc1cc(OC)c(F)c(COc2cnc(Nc3cnn(CCN4CCNCC4)c3)nc2)c1F
	Cl.OCCC/C(=C(\c1ccc(O)cc1)c1ccc(C2CCNCC2)cc1)c1ccccc1 --> OCCC/C(=C(\c1ccc(O)cc1)c1ccc(C2CCNCC2)cc1)c1ccccc1
	COc1ccc(/N=C(\N)CC(O)c2cc3c(F)cc(F)cc3c3cc(C(F)(F)F)ccc23)cc1.Cl --> COc1ccc(/N=C(\N)CC(O)c2cc3c(F)cc(F)cc3c3cc(C(F)(F)F)ccc23)cc1
	COCCNC(=O)CCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.Cl --> COCCNC(=O)CCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O
	COc1cc(N)c(Cl)cc1C(=O)NC1CCN(CCCOc2ccc(F)cc2)CC1OC.O --> COc1cc(N)c(Cl)cc1C(=O)NC1CCN(CCCOc2ccc(F)cc2)CC1OC
	CCCCc1cc(OC2CCN(CCCCNS(C)(=O)=O)CC2)c2ncccc2c1.Cl.Cl --> CCCCc1cc(OC2CCN(CCCCNS(C)(=O)=O)CC2)c2ncccc2c1
	Br.CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1 --> CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1
	CCCNC(=O)CCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.Cl --> CCCNC(=O)CCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O
	Cl.O=C(N1CCN2CCC1CC2)n1nc(-n2cc(C(F)(F)F)cn2)c2c1COCC2 --> O=C(N1CCN2CCC1CC2)n1nc(-n2cc(C(F)(F)F)cn2)c2c1COCC2
[+] Eliminating inorganic and organometallic compounds

Your dataset had 3 molecules with forbiden atoms. They have been eliminated.
	 CNC(=O)c1c(-c2ccc(F)cc2)oc2cc(N(c3ccc(B(O)O)c(Cl)c3)S(C)(=O)=O)c(C3CC3)cc12
	 CNC(=O)c1c(-c2ccc(F)cc2)oc2cc(N(c3cc(Cl)c4c(c3)COB4O)S(C)(=O)=O)c(C3CC3)cc12
	 COc1ccccc1N1CCN(CCCCNC(=O)c2ccc(B3C=CC=CN3)cc2)CC1
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] True 0.20833333333333334 0.2 0.96
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0] True 0.9574271077563381 0.5222329678670935 0.5454545454545454
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1, 1, 1, 1, 1, 1] True 0.44095855184409843 0.3779644730092272 0.8571428571428571
[0, 1, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[1, 0, 1, 0, 1] True 0.9128709291752768 0.5477225575051661 0.6
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 0, 0, 1] True 2.23606797749979 0.447213595499958 0.2
[1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1] True 0.2878197989826109 0.2672612419124244 0.9285714285714286
[1, 0, 1, 1, 1, 1] True 0.4898979485566356 0.408248290463863 0.8333333333333334
[1, 0, 0, 0, 1, 0] True 1.549193338482967 0.5163977794943223 0.3333333333333333
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1] True 0.24216105241892633 0.22941573387056177 0.9473684210526315
[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] True 0.3004626062886658 0.2773500981126146 0.9230769230769231
[1, 1, 0] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 1, 0, 1, 1, 1, 1] True 0.44095855184409843 0.3779644730092272 0.8571428571428571
[1, 0, 1, 1, 1, 1, 1, 1] True 0.4040610178208843 0.3535533905932738 0.875
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] True 0.2878197989826109 0.2672612419124244 0.9285714285714286
[1, 0, 1, 0] True 1.1547005383792515 0.5773502691896257 0.5
[1, 1, 0] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1, 1, 1] True 0.6666666666666666 0.5 0.75
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 1] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 1, 1, 0, 0, 0, 0] True 1.8516401995451028 0.4629100498862757 0.25
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 1, 0, 0, 1] True 1.549193338482967 0.5163977794943223 0.3333333333333333
[1, 1, 0] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 1] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0, 1, 1] True 0.6666666666666666 0.5 0.75
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1, 1, 1, 1, 1, 1, 1, 1] True 0.37500000000000006 0.33333333333333337 0.8888888888888888
[1, 0, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1, 1, 0] True 1.1547005383792515 0.5773502691896257 0.5
[1, 0, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 1, 1, 1] True 0.5590169943749473 0.4472135954999579 0.8
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 0, 1, 0] True 2.0 0.5 0.25
[0, 0, 1] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 1] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 0, 1] True 1.1547005383792515 0.5773502691896257 0.5
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 0, 1, 0, 1] True 1.0954451150103321 0.5477225575051661 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[0, 1, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 1] True 1.4142135623730951 0.7071067811865476 0.5
[1, 1, 1, 0, 1] True 0.5590169943749473 0.4472135954999579 0.8
[0, 0, 1] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[0, 0, 0, 1] True 2.0 0.5 0.25
[0, 1, 0] True 1.7320508075688776 0.5773502691896258 0.3333333333333333
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TOX_hERGinh_ChEMBL-duplicates_for_manual_check.csv
[+] Checking for mixtures
['C=CCOc1ccc(Cl)cc1[C@H]1C[C@@H]1CN.O=C(O)C(F)(F)F', 'CC(C)C(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F', 'CC(C)[C@@H](Oc1ccc(CNC(=O)[C@@H]2CCCN2C(=O)CC(N)Cc2cc(F)ccc2F)cc1)C(=O)O.O=C(O)C(F)(F)F', 'CC(C)[C@H](Oc1ccc(CNC(=O)[C@@H]2CCCN2C(=O)C[C@H](N)Cc2cc(F)ccc2F)cc1)C(=O)O.O=C(O)C(F)(F)F', 'CC(C)n1nc(-c2nnc(C3CCN(C4CCC4)CC3)o2)c2ccccc21.O=C(O)C(=O)O', 'CC(C)n1nc(-c2nnc(C3CCN(CC4(O)CCCC4)CC3)o2)c2ccccc21.O=C(O)C(=O)O', 'CC(C)n1nc(-c2nnc(C3CCN(CC4CCOCC4)CC3)o2)c2ccccc21.O=C(O)C(=O)O', 'CC(c1nc(-c2ccc(S(C)(=O)=O)cc2Cl)no1)[C@H](N)C(F)=C1CCCC1.O=C(O)C(F)(F)F', 'CCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F', 'CCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F', 'CCCCCCC[N+](CC)(CC)CC#Cc1ccc(Cl)cc1.Cc1ccc(S(=O)(=O)[O-])cc1', 'CCCCCCC[N+](CC)(CC)CCCCc1ccc(Cl)cc1.Cc1ccc(S(=O)(=O)[O-])cc1', 'CCN(CC)CC.NC(=O)c1ccc(-c2cc(C(=O)O)cc(-n3cc(-c4ccc(C(F)(F)F)cc4)nn3)c2)cc1', 'CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C3)cc(OCC)c1-c1ccc(F)cc1.O=C(O)C(F)(F)F', 'CN(C)C(=O)[C@@H](c1ccc(-c2ccc(F)cc2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F', 'CN(C)C(=O)[C@@H](c1ccc(-c2ccn3ncnc3c2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.CS(=O)(=O)O', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.Cc1ccc(S(=O)(=O)O)cc1', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)/C=C\\C(=O)O', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)C(=O)O', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)CCC(=O)O', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)c1cc(O)ccc1O', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=S(=O)(O)CCS(=O)(=O)O', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=S(=O)(O)O', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=S(=O)(O)c1ccccc1', 'CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=[N+]([O-])O', 'CN1CCC(CNc2ccc3ncc(-c4cccc(OC(F)(F)F)c4)n3n2)CC1.O=S(=O)(O)O', 'CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O', 'CN1Cc2ccccc2[C@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O', 'COC(=O)Cc1ccc(CNC(=O)[C@@H]2CSCN2C(=O)CC(N)Cc2ccccc2F)cc1.O=C(O)C(F)(F)F', 'COC(=O)c1ccccc1-c1ccc(CN2CCC(COC(=O)c3c4n(c5ccccc35)CCCO4)CC2)cc1.CS(=O)(=O)O', 'COCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F', 'COCC(C)(C)CN1CCC(c2nnc(-c3nn(C(C)C)c4ccccc34)o2)CC1.O=C(O)C(=O)O', 'COCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=CO', 'COCCCC(=O)N(C)CCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F', 'COCCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F', 'COCCCN1CCC(O)(NC(=O)c2nn(C(C)C)c3ccccc23)CC1.O=C(O)C(=O)O', 'COCCCN1CCC(c2nnc(-c3nn(C(C)C)c4ccccc34)o2)CC1.O=C(O)C(=O)O', 'COc1ccc(-c2c(-c3ccc(C#N)c(F)c3)nc(N3CCC(N)CC3)n(C)c2=O)cc1F.O=S(=O)(O)c1ccccc1', 'COc1ccc([C@]2(O)CC[C@H](N3CC[C@@H](NC(=O)CNC(=O)c4cccc(C(F)(F)F)c4)C3)CC2)cn1.CS(=O)(=O)O', 'CS(=O)(=O)Nc1ccc2c(c1)nc1n2C[C@H](N)[C@@H](c2cc(F)c(F)cc2F)C1.O=C(O)C(F)(F)F', 'CS(=O)(=O)O.NC[C@H]1CC[C@]2(CC1)OOC1(O2)C2CC3CC(C2)CC1C3', 'CS(=O)(=O)O.O=C(O)c1ccccc1-c1ccc(CN2CCC(COC(=O)c3c4n(c5ccccc35)CCCO4)CC2)cc1', 'CS(=O)(=O)c1ccc(-c2noc([C@@H](CC3CC3)[C@H](N)C(=O)N3CC[C@H](F)C3)n2)c(F)c1.O=C(O)C(F)(F)F', 'CS(=O)(=O)c1ccc(-c2noc([C@@H](CC3CC3)[C@H](N)C(F)=C3CCCC3)n2)c(Cl)c1.O=C(O)C(F)(F)F', 'CS(=O)(=O)c1ccc(-c2noc([C@@H](CCO)[C@H](N)C(F)=C3CCCC3)n2)c(Cl)c1.O=C(O)C(F)(F)F', 'CS(=O)(=O)c1ccc2c(c1)nc1n2C[C@H](N)[C@@H](c2cc(F)c(F)cc2F)C1.O=C(O)C(F)(F)F', 'C[C@@H](c1ccc(-c2ccc(F)cc2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F', 'C[C@@H](c1ccc(-c2ccc(O)nc2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F', 'C[C@@H](c1ccc(-c2cccc(-c3nn[nH]n3)c2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F', 'C[C@@H](c1ccc(-c2cccc(-c3noc(O)n3)c2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F', 'C[C@@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3cc(F)cc(F)c3)CC2=O)cc1.O=CO', 'C[C@@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3)CC2=O)cc1.O=CO', 'C[C@@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3F)CC2=O)cc1.O=CO', 'C[C@H](c1nc(-c2ccc(Cl)cc2Cl)no1)[C@H](N)C(=O)N1CCCC1.O=C(O)C(F)(F)F', 'C[C@H](c1nc(-c2ccc(S(C)(=O)=O)cc2Cl)no1)[C@H](N)C(=O)N1CCCC1.O=C(O)C(F)(F)F', 'C[C@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3cc(F)cc(F)c3)CC2=O)cc1.O=CO', 'C[C@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3)CC2=O)cc1.O=CO', 'C[C@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3F)CC2=O)cc1.O=CO', 'C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23', 'Cc1cc(=O)n2nc(N3CC[C@H](c4cc(F)c(F)cc4F)[C@@H](N)C3)ccc2n1.O=C(O)C(F)(F)F', 'Cc1ccc(Cc2cc[n+](C)c(COc3ccc(C)cc3)c2)cc1.O=S(=O)([O-])C(F)(F)F', 'Cc1nnc2ccc(N3CC[C@H](c4cc(F)c(F)cc4F)[C@@H](N)C3)nn12.O=C(O)C(F)(F)F', 'Clc1cccc(CN(CC2CNC2)c2ccccc2)c1Cl.O=C(O)C(F)(F)F', 'N#Cc1ccc(C(=O)N2CCN(c3ccc(OC4CCN(C5CCC5)CC4)cc3)C(=O)C2)cc1.O=CO', 'N#Cc1ccc(C(=O)N2CCN(c3ccc(OCCCN4CCCCCC4)cc3)C(=O)C2)cc1.O=CO', 'NC(CC(=O)N1CCC[C@H]1C(=O)NCc1ccc(C(=O)O)cc1)Cc1ccc(F)c(F)c1.O=C(O)C(F)(F)F', 'NC(CC(=O)N1CCC[C@H]1C(=O)NCc1ccc(C(F)(F)F)cc1)Cc1ccccc1F.O=C(O)C(F)(F)F', 'N[C@H]1CN(c2ccc3nc(=O)ccn3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F', 'N[C@H]1CN(c2ccc3nc(C(F)(F)F)nn3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F', 'N[C@H]1CN(c2ccn3cnnc3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F', 'N[C@H]1CN(c2ccncn2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F', 'N[C@H]1CN(c2cnc3nccnc3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F', 'N[C@H]1Cn2c(nc3cc(C(F)(F)F)ccc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F', 'N[C@H]1Cn2c(nc3ccc(F)cc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F', 'N[C@H]1Cn2c(nc3cnc(C(F)(F)F)cc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F', 'N[C@H]1Cn2c(nc3cnc(F)cc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F', 'N[C@H]1Cn2c(nc3cnccc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F', 'N[C@H]1Cn2c(nc3ncccc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F', 'O=C(NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O)C1CCCC1.O=C(O)C(F)(F)F', 'O=C(NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O)C1CCOCC1.O=C(O)C(F)(F)F', 'O=C(O)C(=O)O.c1ccc(-c2ccc(OCCCCCN3CCCCC3)cc2)cc1', 'O=C(O)C(=O)O.c1ccc(-c2ccc(OCCCCCN3CCCCCC3)cc2)cc1', 'O=C(c1cc(F)cc(F)c1)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO', 'O=C(c1cc(F)cc(F)c1)N1CCN(c2ccc(OCCCN3CCCCC3)cc2)C(=O)C1.O=CO', 'O=C(c1cc(F)cc(F)c1)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2)C(=O)C1.O=CO', 'O=C(c1ccc(Cl)cc1)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO', 'O=C(c1ccc(F)cc1)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO', 'O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCC3)cc2)C(=O)C1.O=CO', 'O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCCC3)cc2)C(=O)C1.O=CO', 'O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2)C(=O)C1.O=CO', 'O=C(c1ccc(F)cc1F)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO', 'O=C(c1ccc(F)cc1F)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2)C(=O)C1.O=CO']

Your dataset had 93 mixtures
	 C=CCOc1ccc(Cl)cc1[C@H]1C[C@@H]1CN.O=C(O)C(F)(F)F
	 CC(C)C(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F
	 CC(C)[C@@H](Oc1ccc(CNC(=O)[C@@H]2CCCN2C(=O)CC(N)Cc2cc(F)ccc2F)cc1)C(=O)O.O=C(O)C(F)(F)F
	 CC(C)[C@H](Oc1ccc(CNC(=O)[C@@H]2CCCN2C(=O)C[C@H](N)Cc2cc(F)ccc2F)cc1)C(=O)O.O=C(O)C(F)(F)F
	 CC(C)n1nc(-c2nnc(C3CCN(C4CCC4)CC3)o2)c2ccccc21.O=C(O)C(=O)O
	 CC(C)n1nc(-c2nnc(C3CCN(CC4(O)CCCC4)CC3)o2)c2ccccc21.O=C(O)C(=O)O
	 CC(C)n1nc(-c2nnc(C3CCN(CC4CCOCC4)CC3)o2)c2ccccc21.O=C(O)C(=O)O
	 CC(c1nc(-c2ccc(S(C)(=O)=O)cc2Cl)no1)[C@H](N)C(F)=C1CCCC1.O=C(O)C(F)(F)F
	 CCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F
	 CCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F
	 CCCCCCC[N+](CC)(CC)CC#Cc1ccc(Cl)cc1.Cc1ccc(S(=O)(=O)[O-])cc1
	 CCCCCCC[N+](CC)(CC)CCCCc1ccc(Cl)cc1.Cc1ccc(S(=O)(=O)[O-])cc1
	 CCN(CC)CC.NC(=O)c1ccc(-c2cc(C(=O)O)cc(-n3cc(-c4ccc(C(F)(F)F)cc4)nn3)c2)cc1
	 CCOc1cc(CN2CCC3(CC2)CC(=O)N(c2ccc(C(=O)O)cc2)C3)cc(OCC)c1-c1ccc(F)cc1.O=C(O)C(F)(F)F
	 CN(C)C(=O)[C@@H](c1ccc(-c2ccc(F)cc2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F
	 CN(C)C(=O)[C@@H](c1ccc(-c2ccn3ncnc3c2)cc1)[C@H](N)C(=O)N1CCC(F)(F)C1.O=C(O)C(F)(F)F
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.CS(=O)(=O)O
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.Cc1ccc(S(=O)(=O)O)cc1
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)/C=C\C(=O)O
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)C(=O)O
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)CCC(=O)O
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=C(O)c1cc(O)ccc1O
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=S(=O)(O)CCS(=O)(=O)O
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=S(=O)(O)O
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=S(=O)(O)c1ccccc1
	 CN(C)c1ccc(/N=N/c2ccccn2)c(O)c1.O=[N+]([O-])O
	 CN1CCC(CNc2ccc3ncc(-c4cccc(OC(F)(F)F)c4)n3n2)CC1.O=S(=O)(O)O
	 CN1Cc2ccccc2[C@@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O
	 CN1Cc2ccccc2[C@H](c2ccccc2)N=C1OCc1ccc(NS(C)(=O)=O)cc1.O=C(O)/C=C/C(=O)O
	 COC(=O)Cc1ccc(CNC(=O)[C@@H]2CSCN2C(=O)CC(N)Cc2ccccc2F)cc1.O=C(O)C(F)(F)F
	 COC(=O)c1ccccc1-c1ccc(CN2CCC(COC(=O)c3c4n(c5ccccc35)CCCO4)CC2)cc1.CS(=O)(=O)O
	 COCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F
	 COCC(C)(C)CN1CCC(c2nnc(-c3nn(C(C)C)c4ccccc34)o2)CC1.O=C(O)C(=O)O
	 COCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=CO
	 COCCCC(=O)N(C)CCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F
	 COCCCC(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O.O=C(O)C(F)(F)F
	 COCCCN1CCC(O)(NC(=O)c2nn(C(C)C)c3ccccc23)CC1.O=C(O)C(=O)O
	 COCCCN1CCC(c2nnc(-c3nn(C(C)C)c4ccccc34)o2)CC1.O=C(O)C(=O)O
	 COc1ccc(-c2c(-c3ccc(C#N)c(F)c3)nc(N3CCC(N)CC3)n(C)c2=O)cc1F.O=S(=O)(O)c1ccccc1
	 COc1ccc([C@]2(O)CC[C@H](N3CC[C@@H](NC(=O)CNC(=O)c4cccc(C(F)(F)F)c4)C3)CC2)cn1.CS(=O)(=O)O
	 CS(=O)(=O)Nc1ccc2c(c1)nc1n2C[C@H](N)[C@@H](c2cc(F)c(F)cc2F)C1.O=C(O)C(F)(F)F
	 CS(=O)(=O)O.NC[C@H]1CC[C@]2(CC1)OOC1(O2)C2CC3CC(C2)CC1C3
	 CS(=O)(=O)O.O=C(O)c1ccccc1-c1ccc(CN2CCC(COC(=O)c3c4n(c5ccccc35)CCCO4)CC2)cc1
	 CS(=O)(=O)c1ccc(-c2noc([C@@H](CC3CC3)[C@H](N)C(=O)N3CC[C@H](F)C3)n2)c(F)c1.O=C(O)C(F)(F)F
	 CS(=O)(=O)c1ccc(-c2noc([C@@H](CC3CC3)[C@H](N)C(F)=C3CCCC3)n2)c(Cl)c1.O=C(O)C(F)(F)F
	 CS(=O)(=O)c1ccc(-c2noc([C@@H](CCO)[C@H](N)C(F)=C3CCCC3)n2)c(Cl)c1.O=C(O)C(F)(F)F
	 CS(=O)(=O)c1ccc2c(c1)nc1n2C[C@H](N)[C@@H](c2cc(F)c(F)cc2F)C1.O=C(O)C(F)(F)F
	 C[C@@H](c1ccc(-c2ccc(F)cc2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F
	 C[C@@H](c1ccc(-c2ccc(O)nc2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F
	 C[C@@H](c1ccc(-c2cccc(-c3nn[nH]n3)c2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F
	 C[C@@H](c1ccc(-c2cccc(-c3noc(O)n3)c2)cc1)[C@H](N)C(=O)N1CC[C@H](F)C1.O=C(O)C(F)(F)F
	 C[C@@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3cc(F)cc(F)c3)CC2=O)cc1.O=CO
	 C[C@@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3)CC2=O)cc1.O=CO
	 C[C@@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3F)CC2=O)cc1.O=CO
	 C[C@H](c1nc(-c2ccc(Cl)cc2Cl)no1)[C@H](N)C(=O)N1CCCC1.O=C(O)C(F)(F)F
	 C[C@H](c1nc(-c2ccc(S(C)(=O)=O)cc2Cl)no1)[C@H](N)C(=O)N1CCCC1.O=C(O)C(F)(F)F
	 C[C@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3cc(F)cc(F)c3)CC2=O)cc1.O=CO
	 C[C@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3)CC2=O)cc1.O=CO
	 C[C@H]1CCCN1CCCOc1ccc(N2CCN(C(=O)c3ccc(F)cc3F)CC2=O)cc1.O=CO
	 C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23.C[C@H]1COc2c(N3CCN(C)CC3)c(F)cc3c(=O)c(C(=O)O)cn1c23
	 Cc1cc(=O)n2nc(N3CC[C@H](c4cc(F)c(F)cc4F)[C@@H](N)C3)ccc2n1.O=C(O)C(F)(F)F
	 Cc1ccc(Cc2cc[n+](C)c(COc3ccc(C)cc3)c2)cc1.O=S(=O)([O-])C(F)(F)F
	 Cc1nnc2ccc(N3CC[C@H](c4cc(F)c(F)cc4F)[C@@H](N)C3)nn12.O=C(O)C(F)(F)F
	 Clc1cccc(CN(CC2CNC2)c2ccccc2)c1Cl.O=C(O)C(F)(F)F
	 N#Cc1ccc(C(=O)N2CCN(c3ccc(OC4CCN(C5CCC5)CC4)cc3)C(=O)C2)cc1.O=CO
	 N#Cc1ccc(C(=O)N2CCN(c3ccc(OCCCN4CCCCCC4)cc3)C(=O)C2)cc1.O=CO
	 NC(CC(=O)N1CCC[C@H]1C(=O)NCc1ccc(C(=O)O)cc1)Cc1ccc(F)c(F)c1.O=C(O)C(F)(F)F
	 NC(CC(=O)N1CCC[C@H]1C(=O)NCc1ccc(C(F)(F)F)cc1)Cc1ccccc1F.O=C(O)C(F)(F)F
	 N[C@H]1CN(c2ccc3nc(=O)ccn3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F
	 N[C@H]1CN(c2ccc3nc(C(F)(F)F)nn3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F
	 N[C@H]1CN(c2ccn3cnnc3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F
	 N[C@H]1CN(c2ccncn2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F
	 N[C@H]1CN(c2cnc3nccnc3n2)CC[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F
	 N[C@H]1Cn2c(nc3cc(C(F)(F)F)ccc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F
	 N[C@H]1Cn2c(nc3ccc(F)cc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F
	 N[C@H]1Cn2c(nc3cnc(C(F)(F)F)cc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F
	 N[C@H]1Cn2c(nc3cnc(F)cc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F
	 N[C@H]1Cn2c(nc3cnccc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F
	 N[C@H]1Cn2c(nc3ncccc32)C[C@@H]1c1cc(F)c(F)cc1F.O=C(O)C(F)(F)F.O=C(O)C(F)(F)F
	 O=C(NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O)C1CCCC1.O=C(O)C(F)(F)F
	 O=C(NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c2ccccc2c1=O)C1CCOCC1.O=C(O)C(F)(F)F
	 O=C(O)C(=O)O.c1ccc(-c2ccc(OCCCCCN3CCCCC3)cc2)cc1
	 O=C(O)C(=O)O.c1ccc(-c2ccc(OCCCCCN3CCCCCC3)cc2)cc1
	 O=C(c1cc(F)cc(F)c1)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO
	 O=C(c1cc(F)cc(F)c1)N1CCN(c2ccc(OCCCN3CCCCC3)cc2)C(=O)C1.O=CO
	 O=C(c1cc(F)cc(F)c1)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2)C(=O)C1.O=CO
	 O=C(c1ccc(Cl)cc1)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO
	 O=C(c1ccc(F)cc1)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO
	 O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCC3)cc2)C(=O)C1.O=CO
	 O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCCC3)cc2)C(=O)C1.O=CO
	 O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2)C(=O)C1.O=CO
	 O=C(c1ccc(F)cc1F)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC3)cc2)C(=O)C1.O=CO
	 O=C(c1ccc(F)cc1F)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2)C(=O)C1.O=CO

The mixtures with their values will be saved in a csv file
                                             SAN_SMILES  ... y_old
64     C=CCOc1ccc(Cl)cc1[C@H]1C[C@@H]1CN.O=C(O)C(F)(F)F  ...   [1]
424   CC(C)C(=O)NCCN1CCC[C@@H]1Cn1nc(Cc2ccc(Cl)cc2)c...  ...   [1]
605   CC(C)[C@@H](Oc1ccc(CNC(=O)[C@@H]2CCCN2C(=O)CC(...  ...   [0]
609   CC(C)[C@H](Oc1ccc(CNC(=O)[C@@H]2CCCN2C(=O)C[C@...  ...   [0]
676   CC(C)n1nc(-c2nnc(C3CCN(C4CCC4)CC3)o2)c2ccccc21...  ...   [1]
...                                                 ...  ...   ...
7560  O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCC3)cc2)C(...  ...   [1]
7561  O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCCC3)cc2)C...  ...   [0]
7562  O=C(c1ccc(F)cc1)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2)...  ...   [0]
7564  O=C(c1ccc(F)cc1F)N1CCN(c2ccc(OC3CCN(C4CCCC4)CC...  ...   [0]
7565  O=C(c1ccc(F)cc1F)N1CCN(c2ccc(OCCCN3CCCCCC3)cc2...  ...   [0]

[93 rows x 12 columns]

A new file has been generated:

.\results\TOX_hERGinh_ChEMBL.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 9672 molecules.
Your output dataset has 7948 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_hERGinh_vnnADMET-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds

Your dataset had 3 molecules with forbiden atoms. They have been eliminated.
	 O=C1N(c2ccccc2)[Se]c(c13)cccc3
	 CC(O[Hg]c1ccccc1)=O
	 C[Hg]Cl
[+] Checking for repeated compounds considering extra data
	Your dataset has duplicated compounds.
2
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 1, 0] True 0.8660254037844386 0.5773502691896257 0.6666666666666666
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
[1, 0] True 1.4142135623730951 0.7071067811865476 0.5
WARNING: Some rows have been eliminated for being null (this is normal if outliers have been removed)
	All duplicated compounds (including those with equivalent target) are save in a file called \TOX_hERGinh_vnnADMET-duplicates_for_manual_check.csv
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TOX_hERGinh_vnnADMET.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['SAN_SMILES', 'y', 'ID', 'orig_ID', 'CAS', 'NAME', 'UNITS',
       'smiles_source', 'ORIGINAL_SMILES', 'MOL_OBJECT', 'SMILES', 'y_old'],
      dtype='object')
Your input dataset has 685 molecules.
Your output dataset has 642 molecules.
thanks for using HYGIEIA!

#########################################################################
####################### WELCOME TO HYGIEIA script #######################
#########################################################################
This script will process your dataframe and: 
 	- eliminate incorrect molecules ans sanitize smiles
 	- clean salts
 	- eliminate inorganic and organometallic compounds
 	- check for duplicated molecules
 	- check for mixtures.
A file located in ".\results" folder is needed
This file must be called: "\TOX_hERGinh_DeepPK-preprocessed.csv"
Extra columns are available in the input file:

['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
What to you want to do with them?.

	[1] Ignore extra data and remove it from following steps.

		  "SMILES" will be the only filtered/sanitized column and "y" will be the only redirected output.

	[2] Keep them in the output.

		  SMILES will be only the filtered/sanitized column but all the rest will be redirected in the output.

	[3] Keep them in the output and use them to check duplicates.

		  More than one column will be used for filtering: SMILES will be for sanitize, mixture, salts and inorganics,
		  the rest of the columns (except y) for checking for duplicates.

	[4] Select which columns I want to keep and  which to use them to check duplicates.

		  Provide a list with two lists [check dups, keep] do not include your SMILES and y
SMILES y ['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source']
[+] Sanitizing smiles (Always done)
Index(['ID', 'orig_ID', 'SMILES', 'y', 'CAS', 'NAME', 'UNITS',
       'smiles_source'],
      dtype='object')
[+] Eliminating salts 
	Congratulations, your dataset has not salts.
[+] Eliminating inorganic and organometallic compounds
	Congratulations, your dataset has not inorganic and organometallic compounds.
[+] Checking for repeated compounds considering extra data
	Congratulations, your dataset has not duplicated compounds.
[+] Checking for mixtures
[]
	Congratulations, your dataset has not mixtures.

A new file has been generated:

.\results\TOX_hERGinh_DeepPK.csv: contains the unique molecules, following your instructions
['ID', 'orig_ID', 'CAS', 'NAME', 'UNITS', 'smiles_source'] [] Index(['ID', 'SAN_SMILES', 'MOL_OBJECT', 'ORIGINAL_SMILES', 'orig_ID',
       'SMILES', 'y', 'CAS', 'NAME', 'UNITS', 'smiles_source'],
      dtype='object')
Your input dataset has 20728 molecules.
Your output dataset has 20728 molecules.
thanks for using HYGIEIA!
Working on: 
 F:\ProtoQSAR\PROJECTS_AND_CLIENTS\IRB\scripts\pre_preprocessed_ONGOING
Output directory already exists: ../results/
Output directory already exists: ../results/clean_files
   project_name                     tag  ... notes_2  preprocessin steps info
0     ONTOX_WP1        TK_FUB_Tonnelier  ...     NaN                      NaN
1     ONTOX_WP1         TK_FUB_Yamazaki  ...     NaN                      NaN
2     ONTOX_WP1         TK_FUB_Lombardo  ...     NaN                      NaN
3     ONTOX_WP1            TK_FUB_Riley  ...     NaN                      NaN
4     ONTOX_WP1           TK_FUB_Votano  ...     NaN                      NaN
5     ONTOX_WP1             TK_FUB_cran  ...     NaN                      NaN
6     ONTOX_WP1              TK_FUB_Zhu  ...     NaN                      NaN
7           IRB     TK_CYP3A4inh_DeepPK  ...     NaN                      NaN
8           IRB     TK_CYP2C9inh_DeepPK  ...     NaN                      NaN
9           IRB    TK_CYP2C19inh_DeepPK  ...     NaN                      NaN
10          IRB     TK_CYP2D6inh_DeepPK  ...     NaN                      NaN
11          IRB     TK_CYP1A2inh_DeepPK  ...     NaN                      NaN
12          IRB         TOX_MRDD_DeepPK  ...     NaN                      NaN
13          IRB  TK_OATP1B1inh_livertox  ...     NaN                      NaN
14          IRB  TK_OATP1B3inh_livertox  ...     NaN                      NaN
15          IRB   TOX_Cav12inh_CtoxPred  ...     NaN                      NaN
16          IRB     TOX_Cav12inh_ChEMBL  ...     NaN                      NaN
17          IRB   TOX_Nav15inh_CtoxPred  ...     NaN                      NaN
18          IRB     TOX_Nav15inh_ChEMBL  ...     NaN                      NaN
19          IRB      TOX_hERGinh_ChEMBL  ...     NaN                      NaN
20          IRB    TOX_hERGinh_vnnADMET  ...     NaN                      NaN
21          IRB      TOX_hERGinh_DeepPK  ...     NaN                      NaN

[22 rows x 23 columns]

[+] Analysing "TK_FUB_Tonnelier.xlsx" dataset
	[++] Dataframe file created: TK_FUB_Tonnelier-entiredata.csv
	[++] Preprocessed dataframe file created: TK_FUB_Tonnelier-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_FUB_Tonnelier

[+] Analysing "TK_FUB_Yamazaki.xlsx" dataset
	[++] Dataframe file created: TK_FUB_Yamazaki-entiredata.csv
	[++] Preprocessed dataframe file created: TK_FUB_Yamazaki-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_FUB_Yamazaki

[+] Analysing "TK_FUB_Lombardo.xlsx" dataset
	[++] Dataframe file created: TK_FUB_Lombardo-entiredata.csv
	[++] Preprocessed dataframe file created: TK_FUB_Lombardo-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_FUB_Lombardo

[+] Analysing "TK_FUB_Riley.xlsx" dataset
	[++] Dataframe file created: TK_FUB_Riley-entiredata.csv
	[++] Preprocessed dataframe file created: TK_FUB_Riley-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_FUB_Riley

[+] Analysing "TK_FUB_Votano.xlsx" dataset
	[++] Dataframe file created: TK_FUB_Votano-original.csv
	[++] Dataframe file created: TK_FUB_Votano-entiredata.csv
	[++] Preprocessed dataframe file created: TK_FUB_Votano-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_FUB_Votano

[+] Analysing "TK_FUB_cran.xlsx" dataset
	[++] Dataframe file created: TK_FUB_cran-original.csv
	[++] Dataframe file created: TK_FUB_cran-entiredata.csv
	[++] Preprocessed dataframe file created: TK_FUB_cran-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_FUB_cran

[+] Analysing "TK_FUB_Zhu.xlsx" dataset
	[++] Dataframe file created: TK_FUB_Zhu-original.csv
	[++] Dataframe file created: TK_FUB_Zhu-entiredata.csv
	[++] Preprocessed dataframe file created: TK_FUB_Zhu-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_FUB_Zhu

[+] Analysing "DeepPK_cyp3a4_inhibitor_all.csv" dataset
	[++] Dataframe file created: TK_CYP3A4inh_DeepPK-entiredata.csv
	[++] Preprocessed dataframe file created: TK_CYP3A4inh_DeepPK-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_CYP3A4inh_DeepPK

[+] Analysing "DeepPK_cyp2c9_inhibitor_all.csv" dataset
	[++] Dataframe file created: TK_CYP2C9inh_DeepPK-entiredata.csv
	[++] Preprocessed dataframe file created: TK_CYP2C9inh_DeepPK-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_CYP2C9inh_DeepPK

[+] Analysing "DeepPK_cyp2c19_inhibitor_all.csv" dataset
	[++] Dataframe file created: TK_CYP2C19inh_DeepPK-entiredata.csv
	[++] Preprocessed dataframe file created: TK_CYP2C19inh_DeepPK-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_CYP2C19inh_DeepPK

[+] Analysing "DeepPK_cyp2d6_inhibitor_all.csv" dataset
	[++] Dataframe file created: TK_CYP2D6inh_DeepPK-entiredata.csv
	[++] Preprocessed dataframe file created: TK_CYP2D6inh_DeepPK-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_CYP2D6inh_DeepPK

[+] Analysing "DeepPK_cyp1a2_inhibitor_all.csv" dataset
	[++] Dataframe file created: TK_CYP1A2inh_DeepPK-entiredata.csv
	[++] Preprocessed dataframe file created: TK_CYP1A2inh_DeepPK-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_CYP1A2inh_DeepPK

[+] Analysing "DeepPK_fdamdd_reg_all.csv" dataset
	[++] Dataframe file created: TOX_MRDD_DeepPK-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_MRDD_DeepPK-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_MRDD_DeepPK

[+] Analysing "Livertox_Oatp1b1INH_all.csv" dataset
	[++] Dataframe file created: TK_OATP1B1inh_livertox-entiredata.csv
	[++] Preprocessed dataframe file created: TK_OATP1B1inh_livertox-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_OATP1B1inh_livertox

[+] Analysing "Livertox_Oatp1b3INH_all.csv" dataset
	[++] Dataframe file created: TK_OATP1B3inh_livertox-entiredata.csv
	[++] Preprocessed dataframe file created: TK_OATP1B3inh_livertox-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TK_OATP1B3inh_livertox

[+] Analysing "TK_CtoxPred_Cav12inh_firstprocessing.csv" dataset
	[++] Dataframe file created: TOX_Cav12inh_CtoxPred-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_Cav12inh_CtoxPred-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_Cav12inh_CtoxPred

[+] Analysing "TK_ChemBL_Cav12inh_firstprocessing.csv" dataset
	[++] Dataframe file created: TOX_Cav12inh_ChEMBL-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_Cav12inh_ChEMBL-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_Cav12inh_ChEMBL

[+] Analysing "TK_CtoxPred_Nav15inh_firstprocessing.csv" dataset
	[++] Dataframe file created: TOX_Nav15inh_CtoxPred-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_Nav15inh_CtoxPred-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_Nav15inh_CtoxPred

[+] Analysing "TK_ChemBL_Nav15inh_firstprocessing.csv" dataset
	[++] Dataframe file created: TOX_Nav15inh_ChEMBL-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_Nav15inh_ChEMBL-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_Nav15inh_ChEMBL

[+] Analysing "TK_ChemBL_hERGinh_firstprocessing.csv" dataset
	[++] Dataframe file created: TOX_hERGinh_ChEMBL-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_hERGinh_ChEMBL-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_hERGinh_ChEMBL

[+] Analysing "hERGinh_vnnADMET_original.csv" dataset
	[++] Dataframe file created: TOX_hERGinh_vnnADMET-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_hERGinh_vnnADMET-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_hERGinh_vnnADMET

[+] Analysing "DeepPK_herg_all.csv" dataset
	[++] Dataframe file created: TOX_hERGinh_DeepPK-entiredata.csv
	[++] Preprocessed dataframe file created: TOX_hERGinh_DeepPK-preprocessed.csv
	[++] Process file by HYGIEIA
	[+++] Dataframe curated file created: TOX_hERGinh_DeepPK
